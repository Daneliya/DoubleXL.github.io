(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{1681:function(t,a,v){t.exports=v.p+"assets/img/fab03b882c0bcf69b83418b621213b70.0fc4356a.png"},1682:function(t,a,v){t.exports=v.p+"assets/img/18d3a43a4304b380da2dbd100f2eb7de.964a64a8.png"},1683:function(t,a,v){t.exports=v.p+"assets/img/8f40f91304567728fe19148a976cb4e6.4e8981d7.png"},1684:function(t,a,v){t.exports=v.p+"assets/img/eeb4c4ddc2aa41e0e03360b3ddb5d239.6a770dca.png"},1973:function(t,a,v){"use strict";v.r(a);var _=v(3),r=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、shardingjdbc的概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、shardingjdbc的概述"}},[t._v("#")]),t._v(" 一、ShardingJdbc的概述")]),t._v(" "),a("blockquote",[a("p",[t._v("官网：http://shardingsphere.apache.org/index_zh.html")]),t._v(" "),a("p",[t._v("下载地址：https://shardingsphere.apache.org/document/current/cn/downloads/")]),t._v(" "),a("p",[t._v("快速入门：https://shardingsphere.apache.org/document/current/cn/quick-start/shardingsphere-jdbc-quick-start/")])]),t._v(" "),a("p",[t._v("以下来自官网的原话：")]),t._v(" "),a("p",[t._v("Apache ShardingSphere 是一套开源的分布式数据库解决方案组成的生态圈，它由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 它们均提供标准化的数据水平扩展、分布式事务和分布式治理等功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。")]),t._v(" "),a("p",[t._v("Apache ShardingSphere 旨在充分合理地在分布式的场景下利用关系型数据库的计算和存储能力，而并非实现一个全新的关系型数据库。 关系型数据库当今依然占有巨大市场份额，是企业核心系统的基石，未来也难于撼动，我们更加注重在原有基础上提供增量，而非颠覆。")]),t._v(" "),a("p",[t._v("Apache ShardingSphere 5.x 版本开始致力于可插拔架构，项目的功能组件能够灵活的以可插拔的方式进行扩展。 目前，数据分片、读写分离、数据加密、影子库压测等功能，以及 MySQL、PostgreSQL、SQLServer、Oracle 等 SQL 与协议的支持，均通过插件的方式织入项目。 开发者能够像使用积木一样定制属于自己的独特系统。Apache ShardingSphere 目前已提供数十个 SPI 作为系统的扩展点，仍在不断增加中。")]),t._v(" "),a("p",[t._v("ShardingSphere 已于2020年4月16日成为 Apache 软件基金会的顶级项目。")]),t._v(" "),a("h2",{attrs:{id:"二、关于改名问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、关于改名问题"}},[t._v("#")]),t._v(" 二、关于改名问题")]),t._v(" "),a("p",[t._v("在3.0以后就更改成了ShardingSphere。")]),t._v(" "),a("h2",{attrs:{id:"三、认识shardingjdbc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、认识shardingjdbc"}},[t._v("#")]),t._v(" 三、认识shardingjdbc")]),t._v(" "),a("p",[a("img",{attrs:{src:v(1681),alt:"img"}})]),t._v(" "),a("p",[t._v("定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。")]),t._v(" "),a("p",[t._v("适用于任何基于 JDBC 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template 或直接使用 JDBC。")]),t._v(" "),a("p",[t._v("支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP 等。\n支持任意实现 JDBC 规范的数据库，目前支持 MySQL，Oracle，SQLServer，PostgreSQL 以及任何遵循 SQL92 标准的数据库。")]),t._v(" "),a("h2",{attrs:{id:"四、认识shardingjdbc功能架构图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、认识shardingjdbc功能架构图"}},[t._v("#")]),t._v(" 四、认识shardingjdbc功能架构图")]),t._v(" "),a("p",[a("img",{attrs:{src:v(1682),alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"五、认识sharding-proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、认识sharding-proxy"}},[t._v("#")]),t._v(" 五、认识Sharding-Proxy")]),t._v(" "),a("ul",[a("li",[t._v("向应用程序完全透明，可直接当做 MySQL/PostgreSQL 使用。")]),t._v(" "),a("li",[t._v("适用于任何兼容 MySQL/PostgreSQL 协议的的客户端。")])]),t._v(" "),a("h2",{attrs:{id:"六、三个组件的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、三个组件的比较"}},[t._v("#")]),t._v(" 六、三个组件的比较")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("Sharding-Jdbc")]),t._v(" "),a("th",[t._v("Sharding-Proxy")]),t._v(" "),a("th",[t._v("Sharding-Sidecar")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("数据库")]),t._v(" "),a("td",[t._v("任意")]),t._v(" "),a("td",[t._v("MYSQL")]),t._v(" "),a("td",[t._v("MYSQL")])]),t._v(" "),a("tr",[a("td",[t._v("连接消耗数")]),t._v(" "),a("td",[t._v("高")]),t._v(" "),a("td",[t._v("低")]),t._v(" "),a("td",[t._v("低")])]),t._v(" "),a("tr",[a("td",[t._v("异构语言")]),t._v(" "),a("td",[t._v("仅Java")]),t._v(" "),a("td",[t._v("任意")]),t._v(" "),a("td",[t._v("任意")])]),t._v(" "),a("tr",[a("td",[t._v("性能")]),t._v(" "),a("td",[t._v("损耗低")]),t._v(" "),a("td",[t._v("损耗高")]),t._v(" "),a("td",[t._v("损耗低")])]),t._v(" "),a("tr",[a("td",[t._v("中心化")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("是")])]),t._v(" "),a("tr",[a("td",[t._v("静态入口")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("有")]),t._v(" "),a("td",[t._v("无")])])])]),t._v(" "),a("h2",{attrs:{id:"七、shardingjdbc混合架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、shardingjdbc混合架构"}},[t._v("#")]),t._v(" 七、ShardingJdbc混合架构")]),t._v(" "),a("p",[a("img",{attrs:{src:v(1683),alt:"img"}})]),t._v(" "),a("p",[t._v("ShardingSphere-JDBC 采用无中心化架构，适用于 Java 开发的高性能的轻量级 OLTP（连接事务处理） 应用；ShardingSphere-Proxy 提供静态入口以及异构语言的支持，适用于 OLAP（连接数据分析） 应用以及对分片数据库进行管理和运维的场景。")]),t._v(" "),a("p",[t._v("Apache ShardingSphere 是多接入端共同组成的生态圈。 通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合与当前业务的最佳系统架构。")]),t._v(" "),a("p",[t._v("八、ShardingShpere的功能清单")]),t._v(" "),a("ul",[a("li",[t._v("功能列表\n"),a("ul",[a("li",[t._v("数据分片")]),t._v(" "),a("li",[t._v("分库 & 分表")]),t._v(" "),a("li",[t._v("读写分离")]),t._v(" "),a("li",[t._v("分片策略定制化")]),t._v(" "),a("li",[t._v("无中心化分布式主键")])])]),t._v(" "),a("li",[t._v("分布式事务\n"),a("ul",[a("li",[t._v("标准化事务接口")]),t._v(" "),a("li",[t._v("XA 强一致事务")]),t._v(" "),a("li",[t._v("柔性事务")]),t._v(" "),a("li",[t._v("数据库治理")])])]),t._v(" "),a("li",[t._v("分布式治理\n"),a("ul",[a("li",[t._v("弹性伸缩")]),t._v(" "),a("li",[t._v("可视化链路追踪")]),t._v(" "),a("li",[t._v("数据加密")])])])]),t._v(" "),a("h2",{attrs:{id:"九、-shardingsphere数据分片内核剖析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九、-shardingsphere数据分片内核剖析"}},[t._v("#")]),t._v(" 九、 ShardingSphere数据分片内核剖析")]),t._v(" "),a("p",[t._v("ShardingSphere 的 3 个产品的数据分片主要流程是完全一致的。 核心由 SQL 解析 => 执行器优化 => SQL 路由 => SQL 改写 => SQL 执行 => 结果归并的流程组成。")]),t._v(" "),a("p",[a("img",{attrs:{src:v(1684),alt:"img"}})]),t._v(" "),a("ol",[a("li",[a("p",[t._v("SQL 解析")]),t._v(" "),a("p",[t._v("分为词法解析和语法解析。 先通过词法解析器将 SQL 拆分为一个个不可再分的单词。再使用语法解析器对 SQL 进行理解，并最终提炼出解析上下文。 解析上下文包括表、选择项、排序项、分组项、聚合函数、分页信息、查询条件以及可能需要修改的占位符的标记。")])]),t._v(" "),a("li",[a("p",[t._v("执行器优化")]),t._v(" "),a("p",[t._v("合并和优化分片条件，如 OR 等。")])]),t._v(" "),a("li",[a("p",[t._v("SQL 路由")]),t._v(" "),a("p",[t._v("根据解析上下文匹配用户配置的分片策略，并生成路由路径。目前支持分片路由和广播路由。")])]),t._v(" "),a("li",[a("p",[t._v("SQL 改写")]),t._v(" "),a("p",[t._v("将 SQL 改写为在真实数据库中可以正确执行的语句。SQL 改写分为正确性改写和优化改写。")])]),t._v(" "),a("li",[a("p",[t._v("SQL 执行")]),t._v(" "),a("p",[t._v("通过多线程执行器异步执行。")])]),t._v(" "),a("li",[a("p",[t._v("结果归并")]),t._v(" "),a("p",[t._v("将多个执行结果集归并以便于通过统一的 JDBC 接口输出。结果归并包括流式归并、内存归并和使用装饰者模式的追加归并这几种方式。")])])]),t._v(" "),a("h3",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("h4",{attrs:{id:"sharding3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sharding3"}},[t._v("#")]),t._v(" sharding3")]),t._v(" "),a("p",[t._v("分库分表（sharding3版本）：https://blog.csdn.net/zxp2624161989/article/details/107094560/")]),t._v(" "),a("p",[t._v("不分库只分表（sharding3版本）：https://www.bilibili.com/video/BV1id4y1z7St、https://blog.csdn.net/zxp2624161989/article/details/107094560/")]),t._v(" "),a("p",[t._v("水平分片：\n创建测试数据局test_order。分别创建三张表t_address， t_user0，t_user1。\n这里假设t_user这个预计随着系统的运行。\n公司发展很好，以后数据量会暴增。所以提前进行水平分片存储。相对于垂直分片，它不再将数据根据业务逻辑分类，\n而是通过某个字段（或某几个字段），根据某种规则将数据分散至多个库或表中，\n每个分片仅包含数据的一部分。这样单表数据量降下来了，mysql的B+树的检索效率就提高了。")]),t._v(" "),a("h4",{attrs:{id:"sharding4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sharding4"}},[t._v("#")]),t._v(" sharding4")]),t._v(" "),a("p",[t._v("不分库只分表（sharding4版本）yml配置：https://blog.csdn.net/weixin_40816738/article/details/126802777\n分表配置后加载报错，ShardingParsingRuleRegistry：https://www.codenong.com/cs105364582/\n方法一：将 jdk的运行版本降为 1.8。\n方法二：将 JAXB 相关jar包重新引入，具体maven。")]),t._v(" "),a("p",[t._v("分库分表（sharding4版本）yml配置：https://blog.csdn.net/akenseren/article/details/127350807\nhttps://www.jianshu.com/p/3b3f7c6fd288")]),t._v(" "),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("p",[t._v("[1]. https://www.cnblogs.com/architectforest/p/13537436.html")]),t._v(" "),a("p",[t._v("[2]. 狂神视频：https://www.bilibili.com/video/BV1ei4y1K7dn\n狂神笔记：https://blog.csdn.net/qq_44866424/article/details/120009099")]),t._v(" "),a("p",[t._v("[3]. win下配置主从复制（不推荐在win上配置）\nhttps://blog.csdn.net/qq_27991253/article/details/128017412")]),t._v(" "),a("h3",{attrs:{id:"面试问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试问题"}},[t._v("#")]),t._v(" 面试问题")]),t._v(" "),a("p",[t._v("1、与mycat区别：")]),t._v(" "),a("p",[t._v("https://www.zhihu.com/question/64709787")]),t._v(" "),a("h3",{attrs:{id:"sharding使用中的一些问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sharding使用中的一些问题"}},[t._v("#")]),t._v(" sharding使用中的一些问题：")]),t._v(" "),a("p",[t._v("1、sharding + MP 启动后无法执行查询：Error querying database？")]),t._v(" "),a("p",[t._v("解决方式：修改版本为4.1.1，使其支持子查询。")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/u014106644/article/details/128335532")]),t._v(" "),a("p",[t._v("4.0.0-RC1版本是有限制支持子查询的 主查询和子查询必须保证相同的分片键;")]),t._v(" "),a("p",[t._v("4.1.1可以支持子查询  子查询判断条件恒为false;")]),t._v(" "),a("p",[t._v("5.0版本 Federation 执行引擎支持子查询；")]),t._v(" "),a("p",[t._v("2、警告：spring boot 集成 sharding jdbc 分库分表 数据库连接健康检查不通过")]),t._v(" "),a("p",[t._v("https://www.cnblogs.com/maohuidong/p/15006724.html")]),t._v(" "),a("p",[t._v("3、服务器配置主从复制报错：Fatal error:The slave I/O thread stops because master and slave have equal MySQL server UUIDs？")]),t._v(" "),a("p",[t._v("原因：使用了VMware克隆了两台虚拟机作为主机和从机导致UUID一样。")]),t._v(" "),a("p",[t._v("解决：找到主机和从机的auto.cnf文件修改uuid值或删除auto.cnf这个文件。")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/cnds123321/article/details/117925881")]),t._v(" "),a("p",[t._v("4、Sharding-JDBC整合Mybatisplus分片键生成策略冲突问题及分析解决")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/weixin_43584430/article/details/120367418")])])}),[],!1,null,null,null);a.default=r.exports}}]);