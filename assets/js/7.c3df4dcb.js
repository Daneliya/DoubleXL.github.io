(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{1495:function(t,a,s){t.exports=s.p+"assets/img/310f5bfe69f7905885b47fda9d78039f.1c44e5ab.png"},1496:function(t,a,s){t.exports=s.p+"assets/img/08dcc56facfa2c22e7ed037c4a3d6477.6c99d846.png"},1497:function(t,a,s){t.exports=s.p+"assets/img/8afa793faf5be94e3848b3a5f45cf34d.7efaccdd.png"},1498:function(t,a,s){t.exports=s.p+"assets/img/2acfb782597741e53c2e65eb7c387597.65a552b4.png"},1499:function(t,a,s){t.exports=s.p+"assets/img/b9110e5d409dac88000ae0a5aa05c808.01edbf18.png"},1500:function(t,a,s){t.exports=s.p+"assets/img/1f7e096d8cda19f1c579a2a54cdc0b2b.936215b2.png"},1501:function(t,a,s){t.exports=s.p+"assets/img/db9eef43845cd4e38dff999eb2aa8564.6d126077.png"},1502:function(t,a,s){t.exports=s.p+"assets/img/7b702e994f39abfc683af04a7c9006e0.2ec37ba0.png"},1503:function(t,a,s){t.exports=s.p+"assets/img/b178236604bb96c82ba8ffa97c407668.fc3b29f3.png"},1504:function(t,a,s){t.exports=s.p+"assets/img/cc39a9f5e40ddb8d92061b4bc6622054.ea2579e3.png"},1505:function(t,a,s){t.exports=s.p+"assets/img/087a5dff3f8bfdd22f1322153a8aec47.bef643b9.png"},1506:function(t,a,s){t.exports=s.p+"assets/img/4c6248cf8495d3cec2c7a96978f0f307.80281c02.png"},1507:function(t,a,s){t.exports=s.p+"assets/img/53fb558253bc1b62a67c1e8c570c787b.9bb36d47.png"},1508:function(t,a,s){t.exports=s.p+"assets/img/8058175bbf363fd75b2a6082308e2b3a.b6c30bb9.png"},1509:function(t,a,s){t.exports=s.p+"assets/img/2ffb745b8f16089bda1614eca35e689f.fac3c27e.png"},1510:function(t,a,s){t.exports=s.p+"assets/img/1bfa98a68700ec11d92111e3cc048308.4fb52eb8.png"},1511:function(t,a,s){t.exports=s.p+"assets/img/8724e324d57e1593e231c5caac481f94.70335df3.png"},1512:function(t,a,s){t.exports=s.p+"assets/img/04d873218c5b2e076018fe75197ac518.eda5a3cc.png"},1513:function(t,a,s){t.exports=s.p+"assets/img/2b55ac6539e75f97425a31a06ad94205.53ecf33a.png"},1514:function(t,a,s){t.exports=s.p+"assets/img/70f119086c71166e30146a7e9a0d570d.b83e9a4b.png"},1515:function(t,a,s){t.exports=s.p+"assets/img/7738ed5ad6b0bd8797637ae6b3d1c361.b4d88ba7.png"},1516:function(t,a,s){t.exports=s.p+"assets/img/da2d16a4d7c8fdf8682c6a376736da3b.8be2badd.png"},1517:function(t,a,s){t.exports=s.p+"assets/img/f97958b0b789b3270099591865d9bb52.4984120d.png"},1518:function(t,a,s){t.exports=s.p+"assets/img/2c55fa15f35781ef6ab39b2a1c2dfa99.3fc80d1a.png"},1519:function(t,a,s){t.exports=s.p+"assets/img/f015459da8c155dcd071d823b4a047a3.44667180.png"},1520:function(t,a,s){t.exports=s.p+"assets/img/00295f0a790e059da775956b89c72c58.f9b6c415.png"},1521:function(t,a,s){t.exports=s.p+"assets/img/025049ff4ccd28f8c84b22d93bc18bae.aa6f5f95.png"},1522:function(t,a,s){t.exports=s.p+"assets/img/e2e561ed353d1c89a46020d44e693992.9591a254.png"},1523:function(t,a,s){t.exports=s.p+"assets/img/8116c86f21a43fef0f6b371ee119190e.500868df.png"},1524:function(t,a,s){t.exports=s.p+"assets/img/718499bd1928df03e7092d562ec3bebd.c7cf61c1.png"},1525:function(t,a,s){t.exports=s.p+"assets/img/41edf887fbd802c57439a29cb46b1b36.9912e5ee.png"},1526:function(t,a,s){t.exports=s.p+"assets/img/146b7d92d51e560571896b80a9328875.d0b13b21.png"},1527:function(t,a,s){t.exports=s.p+"assets/img/84d2971ee8ce0f38b7c8962a83605ea3.b6f1b3bb.png"},1528:function(t,a,s){t.exports=s.p+"assets/img/7a1abe921f828f79d6d2d2c279ef325a.6e93afca.png"},1529:function(t,a,s){t.exports=s.p+"assets/img/ec5796cf862a5b04ab26aa3aef0305ea.56d1329d.png"},1530:function(t,a,s){t.exports=s.p+"assets/img/4214486aca6a111bde8e2e6c6df15bfd.58da448d.png"},1531:function(t,a,s){t.exports=s.p+"assets/img/5c2a842607b2d15ce198fade54fb9cb1.aba31a41.png"},1532:function(t,a,s){t.exports=s.p+"assets/img/d9093ce0b73f9b991ada1e8567cf47eb.91b76e8e.gif"},1533:function(t,a,s){t.exports=s.p+"assets/img/0cf093b01c614aa451ab21a2187993f3.6e19decf.png"},1534:function(t,a,s){t.exports=s.p+"assets/img/0c486a3ea191dd29538033d79fc27819.671bd19a.gif"},1535:function(t,a,s){t.exports=s.p+"assets/img/c2ca4ddb4804ce5dfddea1ecf7bf98dc.cd9480c1.png"},1536:function(t,a,s){t.exports=s.p+"assets/img/e5e0b93698d392bf30b29eacca44f68c.1c7e20f3.gif"},1537:function(t,a,s){t.exports=s.p+"assets/img/f742b640e076e0882aa151f3fcda8aeb.ebb68756.png"},1538:function(t,a,s){t.exports=s.p+"assets/img/052354c97a2567bf0bae666e54a757c0.7073c729.gif"},1539:function(t,a,s){t.exports=s.p+"assets/img/ed46f7cfcbdbce88bdbaf3bdcaf121d9.00273b47.png"},1540:function(t,a,s){t.exports=s.p+"assets/img/773cd143842a8b406a0b718dc75ab3fc.33a947c7.gif"},1541:function(t,a,s){t.exports=s.p+"assets/img/819676-20210311160605077-1738860427.c411339b.gif"},1542:function(t,a,s){t.exports=s.p+"assets/img/0f9fa7f6f846ee812193cb1bdf26a16f.ef6f0483.png"},1543:function(t,a,s){t.exports=s.p+"assets/img/6305841a02990e1040a2606554f23791.cdda3f11.gif"},1544:function(t,a,s){t.exports=s.p+"assets/img/5ea1e0b740634c805f0040d62ce21ca0.ac021859.png"},1545:function(t,a,s){t.exports=s.p+"assets/img/0427802249e46bb0b7679e44802a77d8.3a6f1e50.gif"},1546:function(t,a,s){t.exports=s.p+"assets/img/b62915f647968fcb51b7e77ee1815ce2.4aea6bd1.png"},1547:function(t,a,s){t.exports=s.p+"assets/img/87d39e6fb5df613c4480c4a25b73b3d6.38ca8bac.png"},1548:function(t,a,s){t.exports=s.p+"assets/img/338f26f1979db78d38f1625e3f1c09cb.524cd760.png"},1549:function(t,a,s){t.exports=s.p+"assets/img/3ae61a2e4063519b352c98903f8c475c.8e6bbaa0.png"},1550:function(t,a,s){t.exports=s.p+"assets/img/c324154fcd99ab51f226541189bb6546.0dca6f3e.png"},1942:function(t,a,s){"use strict";s.r(a);var n=s(3),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、完整数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、完整数据结构"}},[t._v("#")]),t._v(" 一、完整数据结构")]),t._v(" "),a("h3",{attrs:{id:"🔎1-线性结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔎1-线性结构"}},[t._v("#")]),t._v(" 🔎1.线性结构")]),t._v(" "),a("ul",[a("li",[t._v("线性表")]),t._v(" "),a("li",[t._v("栈和队列")]),t._v(" "),a("li",[t._v("串")])]),t._v(" "),a("h3",{attrs:{id:"🔎2-数组、矩阵和广义表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔎2-数组、矩阵和广义表"}},[t._v("#")]),t._v(" 🔎2.数组、矩阵和广义表")]),t._v(" "),a("h3",{attrs:{id:"🔎3-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔎3-树"}},[t._v("#")]),t._v(" 🔎3.树")]),t._v(" "),a("ul",[a("li",[t._v("树和二叉树的定义")]),t._v(" "),a("li",[t._v("二叉树的性质与存储结构")]),t._v(" "),a("li",[t._v("二叉树的遍历")]),t._v(" "),a("li",[t._v("线索二叉树")]),t._v(" "),a("li",[t._v("最优二叉树(哈夫曼树)")]),t._v(" "),a("li",[t._v("树和森林")])]),t._v(" "),a("h3",{attrs:{id:"🔎4-图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔎4-图"}},[t._v("#")]),t._v(" 🔎4.图")]),t._v(" "),a("ul",[a("li",[t._v("图的定义和存储")]),t._v(" "),a("li",[t._v("图的遍历")]),t._v(" "),a("li",[t._v("深度优先搜索")]),t._v(" "),a("li",[t._v("广度优先搜索")]),t._v(" "),a("li",[t._v("生成树和最小生成树")]),t._v(" "),a("li",[t._v("拓扑结构和关键路径")])]),t._v(" "),a("h3",{attrs:{id:"🔎5-查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔎5-查找"}},[t._v("#")]),t._v(" 🔎5.查找")]),t._v(" "),a("ul",[a("li",[t._v("查找基本概念")]),t._v(" "),a("li",[t._v("静态查找表的查找方法")]),t._v(" "),a("li",[t._v("顺序查找")]),t._v(" "),a("li",[t._v("折半查找")]),t._v(" "),a("li",[t._v("分块查找")]),t._v(" "),a("li",[t._v("动态查找表")]),t._v(" "),a("li",[t._v("二叉排序树")]),t._v(" "),a("li",[t._v("平衡二叉树")]),t._v(" "),a("li",[t._v("哈希表")])]),t._v(" "),a("h3",{attrs:{id:"🔎6-排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔎6-排序"}},[t._v("#")]),t._v(" 🔎6.排序")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("排序基本概念")])]),t._v(" "),a("li",[a("p",[t._v("简单排序")])]),t._v(" "),a("li",[a("p",[t._v("希尔排序")]),t._v(" "),a("p",[t._v("改进的插入排序")])]),t._v(" "),a("li",[a("p",[t._v("快速排序")])]),t._v(" "),a("li",[a("p",[t._v("堆排序")])]),t._v(" "),a("li",[a("p",[t._v("归并排序")])]),t._v(" "),a("li",[a("p",[t._v("基数排序")])]),t._v(" "),a("li",[a("p",[t._v("外部排序")])])]),t._v(" "),a("h2",{attrs:{id:"二、线性结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、线性结构"}},[t._v("#")]),t._v(" 二、线性结构")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(":evergreen_tree:\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"线性表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表"}},[t._v("#")]),t._v(" 🌲线性表")]),t._v(" "),a("h4",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 🌼概念")]),t._v(" "),a("p",[t._v("线性结构是指每个元素最多只有一个出度和一个入度，表现为一条线状。线性表是一种特殊的线性结构分为顺序表和链表。")]),t._v(" "),a("ul",[a("li",[t._v("顺序表：顺序表是使用一段连续的存储空间来存储线性表的元素，可以通过下标直接访问元素。顺序表的特点是插入和删除操作较慢，但是随机访问元素的效率较高。")]),t._v(" "),a("li",[t._v("链表：链表是通过一系列的节点来存储线性表的元素，每个节点包含数据域和指向下一个节点的指针。链表的特点是插入和删除操作较快，但是随机访问元素的效率较低。")])]),t._v(" "),a("p",[t._v("在线性结构中，除了顺序表和链表，还有一些其他的线性结构，如栈和队列。栈是一种特殊的线性表，只能在表的一端进行插入和删除操作，遵循先进后出（LIFO）的原则。队列也是一种特殊的线性表，只能在表的一端进行插入操作（队尾），在表的另一端进行删除操作（队头），遵循先进先出（FIFO）的原则。")]),t._v(" "),a("p",[t._v("线性结构中元素在计算机内存中的存储方式，主要有顺序存储和链式存储两种方式。")]),t._v(" "),a("ul",[a("li",[t._v("顺序存储：顺序存储是将线性表中的元素依次存储在一组地址连续的存储单元中，使得逻辑上相邻的元素在物理上也相邻。顺序存储的特点是通过元素的下标可以直接访问元素，因此查找效率高。插入和删除元素时需要移动其他元素，效率较低。")]),t._v(" "),a("li",[t._v("链式存储：链式存储是通过存储各数据元素的结点的地址来实现元素的存储，每个结点包含数据域和指向下一个结点的指针。链式存储的特点是插入和删除元素时只需要修改指针，不需要移动其他元素，因此效率较高。但是链式存储无法直接访问中间的元素，需要从头节点开始顺序遍历。")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(1495),alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"顺序存储和链式存储区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序存储和链式存储区别"}},[t._v("#")]),t._v(" 🌲顺序存储和链式存储区别")]),t._v(" "),a("p",[t._v("在空间方面，链表需要额外存储指针，导致空间浪费。")]),t._v(" "),a("p",[t._v("在时间方面：")]),t._v(" "),a("ul",[a("li",[t._v("链表在插入和删除元素时效率更高，因为只需要修改指针指向，而顺序表因为地址连续，插入或删除元素后需要移动其他节点。")]),t._v(" "),a("li",[t._v("在读取和查找元素时，顺序表效率更高，因为物理地址连续，可以通过索引快速定位，而链表需要从头节点开始逐个查找。")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(1496),alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"单链表的插入和删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单链表的插入和删除"}},[t._v("#")]),t._v(" 🌼单链表的插入和删除")]),t._v(" "),a("p",[t._v("单链表的插入")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1497),alt:"img"}})]),t._v(" "),a("p",[t._v("在上图中p所指向的节点后插入s所指向的节点，操作为：")]),t._v(" "),a("div",{staticClass:"language-clike line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-clike"}},[a("code",[t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("单链表的删除")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1498),alt:"img"}})]),t._v(" "),a("p",[t._v("在单链表中删除p所指向节点的后继节点q时，操作为：")]),t._v(" "),a("div",{staticClass:"language-clike line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-clike"}},[a("code",[t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"栈和队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈和队列"}},[t._v("#")]),t._v(" 🌲栈和队列")]),t._v(" "),a("p",[t._v("栈、队列和循环队列是常见的数据结构，用于存储和操作数据。")]),t._v(" "),a("ol",[a("li",[t._v("栈（Stack）是一种后进先出（Last In First Out，LIFO）的数据结构。它只允许在栈的一端进行插入和删除操作，这一端称为栈顶。栈的常用操作有入栈（push）、出栈（pop）和获取栈顶元素（top）。栈可以用数组或链表实现。")]),t._v(" "),a("li",[t._v("队列（Queue）是一种先进先出（First In First Out，FIFO）的数据结构。它允许在队列的一端（队尾）插入新元素，而在另一端（队头）删除元素。队列的常用操作有入队（enqueue）、出队（dequeue）和获取队头元素（front）。队列可以使用数组或链表实现。")]),t._v(" "),a("li",[t._v("循环队列（Circular Queue）是一种具有固定大小的队列，它可以像队列一样先进先出，但是它的队尾和队头是相连的。当队尾到达数组的末尾时，它可以循环回到数组的开头。循环队列的常用操作有入队（enqueue）、出队（dequeue）和获取队头元素（front）。循环队列可以使用数组实现，通过维护两个指针（队头和队尾的索引）来实现循环。")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(1499),alt:"img"}})]),t._v(" "),a("p",[t._v("在循环队列中，头指针指向第一个元素，尾指针指向最后一个元素的下一个位置。当队列为空时，头尾指针相等；当队列满时，头尾指针也相等，无法区分。因此，一般会将队列空出一个元素位置，这样队列满的条件就是尾指针的下一个位置等于头指针。考虑到循环队列特性，需要使用最大元素数取余运算来实现循环，即"),a("code",[t._v("(tail + 1) % size = head")]),t._v("。循环队列的长度可以通过"),a("code",[t._v("(Q.tail - Q.head) % size")]),t._v("公式得到。另外，优先队列是一种特殊的队列，其中的元素被赋予了优先级。在访问元素时，具有最高优先级的元素最先被删除。优先队列常使用堆来存储元素，因为堆的顺序不是按照元素在队列中的顺序来决定的。")]),t._v(" "),a("h3",{attrs:{id:"串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#串"}},[t._v("#")]),t._v(" 🌲串")]),t._v(" "),a("h4",{attrs:{id:"串的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#串的定义"}},[t._v("#")]),t._v(" 🌼串的定义")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("术语")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("定义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("空串")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("长度为0的字符串，没有任何字符。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("空格串")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("由一个或多个空格组成的串，空格是空白字符，占一个字符长度。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("子串")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("串中任意长度的连续字符构成的序列称为子串。含有子串的串称为主串，空串是任意串的子串。")])])])]),t._v(" "),a("h4",{attrs:{id:"串的匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#串的匹配"}},[t._v("#")]),t._v(" 🌼串的匹配")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("算法")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("定义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("模式匹配算法")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("子串的定位操作，用于查找子串在主串中第一次出现的位置的算法。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("基本的模式匹配算法")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("也称为布鲁特一福斯算法，其基本思想是从主串的第1个字符起与模式串的第1个字符比较，若相等，则继续逐个字符进行后续的比较；否则从主串中的第2个字符起与模式串的第1个字符重新比较，直至模式串中每个字符依次和主串中的一个连续的字符序列相等时为止，此时称为匹配成功，否则称为匹配失败。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("KMP算法")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("对基本模式匹配算法的改进，其改进之处在于：每当匹配过程中出现相比较的字符不相等时，不需要回溯主串的字符位置指针，而是利用已经得到的“部分匹配”结果将模式串向右“滑动”尽可能远的距离，再继续进行比较。")])])])]),t._v(" "),a("p",[t._v("KMP算法相比于基本的模式匹配算法差别：")]),t._v(" "),a("ul",[a("li",[t._v("基本的模式匹配算法：匹配失败从第二位开始继续")]),t._v(" "),a("li",[t._v("KMP算法：匹配失败从失败位置开始继续")])]),t._v(" "),a("h2",{attrs:{id:"三、数组、矩阵和广义表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、数组、矩阵和广义表"}},[t._v("#")]),t._v(" 三、数组、矩阵和广义表")]),t._v(" "),a("h3",{attrs:{id:"数组结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组结构"}},[t._v("#")]),t._v(" 🌲数组结构")]),t._v(" "),a("h4",{attrs:{id:"🦋数组的表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🦋数组的表示"}},[t._v("#")]),t._v(" 🦋数组的表示")]),t._v(" "),a("p",[t._v("数组的特点使得它非常适合用于存储和操作大量数据。由于数组在内存中是连续存储的，所以可以通过下标直接访问数组中的元素，而不需要像链表那样遍历整个结构。这样可以提高访问元素的效率。")]),t._v(" "),a("p",[t._v("另外，由于数组的元素类型相同且结构一致，可以利用数组的特性进行高效的数据处理和计算。例如，可以通过循环遍历数组中的元素进行逐个计算或操作。")]),t._v(" "),a("p",[t._v("数组的下标关系具有上下界的约束，可以有效地控制数组的访问和操作。通过下标，可以直接定位数组中的元素，而不需要进行复杂的查找操作。")]),t._v(" "),a("p",[t._v("虽然数组的长度是固定的，不支持插入和删除运算，但是可以通过重新分配内存空间来实现对数组的扩展或缩小。这样可以灵活地管理数组的大小。")]),t._v(" "),a("p",[t._v("假设有一个3行2列的数组：")]),t._v(" "),a("div",{staticClass:"language-clike line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-clike"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  \n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("复制")]),t._v(" "),a("p",[t._v("行向量形式表示时，将每一行都排列在一行中：")]),t._v(" "),a("div",{staticClass:"language-clike line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-clike"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("复制")]),t._v(" "),a("p",[t._v("列向量形式表示时，将每一列都排列在一列中：")]),t._v(" "),a("div",{staticClass:"language-clike line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-clike"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("复制")]),t._v(" "),a("p",[t._v("行向量形式将数组按照行的方式展开成一行，而列向量形式将数组按照列的方式展开成一列。这样的表示方式有时可以方便进行矩阵运算和数据处理。")]),t._v(" "),a("h4",{attrs:{id:"🦋数组存储地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🦋数组存储地址"}},[t._v("#")]),t._v(" 🦋数组存储地址")]),t._v(" "),a("p",[t._v("数组在内存中是连续存储的，因此数组名本身就可以看作是存储数组首元素地址的指针。当我们定义一个数组时，编译器会分配一段连续的内存空间来存储数组元素，并将数组名指向该内存空间的首地址。")]),t._v(" "),a("p",[t._v("例如，假设我们定义了一个int类型的数组arr：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("int arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("复制")]),t._v(" "),a("p",[t._v("在内存中，该数组的元素将被连续存储，如下所示：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("地址        内容\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1004")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1008")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1012")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1016")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("复制")]),t._v(" "),a("p",[t._v("数组名arr在这种情况下可以看作是存储地址1000的指针。我们可以通过使用指针来访问数组元素，例如，访问arr的第一个元素可以使用"),a("em",[t._v("arr或者arr0，访问第二个元素可以使用")]),t._v("(arr+1)或者arr1，以此类推。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1500),alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(1501),alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"矩阵结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#矩阵结构"}},[t._v("#")]),t._v(" 🌲矩阵结构")]),t._v(" "),a("p",[t._v("矩阵是一种常见的数据结构，它由行和列组成的二维数组。矩阵可以用于表示和处理多种类型的数据，如数值、图像、文本等。")]),t._v(" "),a("p",[t._v("在计算机科学中，矩阵通常用于表示图形图像和图像处理算法。例如，图像可以表示为一个矩阵，其中每个元素表示一个像素的颜色值。通过对矩阵进行操作，可以实现图像的旋转、缩放、滤波等处理。")]),t._v(" "),a("p",[t._v("矩阵结构在数值计算和科学计算中也非常重要。矩阵可以用于表示线性方程组、矩阵乘法、求特征值和特征向量等数学运算。通过矩阵运算，可以解决线性方程组、最小二乘拟合、最优化等问题。")]),t._v(" "),a("p",[t._v("在编程中，矩阵通常用二维数组来表示。可以使用索引访问矩阵中的元素，并且可以使用循环遍历矩阵中的所有元素。还可以定义各种操作来处理矩阵，如矩阵相加、相乘等。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1502),alt:"img"}})]),t._v(" "),a("p",[t._v("以下是一些常见的矩阵结构分类：")]),t._v(" "),a("ol",[a("li",[t._v("方阵和非方阵：方阵是行数和列数相等的矩阵，即n x n的矩阵。非方阵则是行数和列数不相等的矩阵。")]),t._v(" "),a("li",[t._v("稀疏矩阵和稠密矩阵：稀疏矩阵是指其中绝大多数元素为0的矩阵。而稠密矩阵则是指其中绝大多数元素不为0的矩阵。")]),t._v(" "),a("li",[t._v("对称矩阵和非对称矩阵：对称矩阵是指以主对角线为对称轴对称的矩阵，即Ai = Aj。非对称矩阵则是指不满足对称性质的矩阵。")]),t._v(" "),a("li",[t._v("上三角矩阵和下三角矩阵：上三角矩阵是指主对角线以下的元素全为0的矩阵，即Ai = 0，当i > j。下三角矩阵则是指主对角线以上的元素全为0的矩阵，即Ai = 0，当i < j。")]),t._v(" "),a("li",[t._v("对角矩阵和非对角矩阵：对角矩阵是指主对角线以外的元素全为0的矩阵。非对角矩阵则是指至少有一个主对角线以外的元素不为0的矩阵。")])]),t._v(" "),a("p",[t._v("三元组结构是一种常用的存储矩阵的方式，它将矩阵中的每个非零元素存储为一个三元组，包括该元素的行索引、列索引和值。")]),t._v(" "),a("p",[t._v("通常情况下，三元组结构中的元素按矩阵的行优先的方式进行存储，即先按行遍历矩阵，再按列遍历。因此，三元组结构的存储方式会将矩阵中的非零元素按照行的顺序排列，并保持它们在矩阵中的相对位置不变。")]),t._v(" "),a("p",[t._v("以一个4x5的矩阵为例：")]),t._v(" "),a("div",{staticClass:"language-clike line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-clike"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("用三元组结构进行存储的结果为：")]),t._v(" "),a("div",{staticClass:"language-clike line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-clike"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("其中，每个三元组表示一个非零元素的行索引、列索引和值。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1503),alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"广义表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#广义表"}},[t._v("#")]),t._v(" 🌲广义表")]),t._v(" "),a("p",[t._v("广义表是一种扩展的线性表，它可以存储不同数据类型的元素，包括原子元素和子表元素。")]),t._v(" "),a("p",[t._v("在广义表中，原子元素指的是不可再分的基本元素，例如整数、字符、布尔值等。子表元素则是指广义表中的另一个广义表，也就是说广义表可以嵌套存储。")]),t._v(" "),a("p",[t._v("广义表的存储结构通常可以使用链表或数组实现。如果使用链表实现，每个节点的数据域可以存储原子元素或指向子表的指针；如果使用数组实现，通常需要预先确定广义表的最大深度，并为每个元素分配固定大小的空间。")]),t._v(" "),a("p",[t._v("广义表的操作包括创建、插入、删除、修改、遍历等。递归是广义表操作的常用方法，可以通过递归遍历广义表的每个元素，从而实现各种操作。")]),t._v(" "),a("p",[t._v("广义表在实际应用中有广泛的用途，例如在编程语言解析中，可以使用广义表来表示语法树；在图形学中，可以使用广义表来表示复杂的图形结构；在人工智能中，可以使用广义表来表示知识库等。")]),t._v(" "),a("p",[t._v("广义表一般记为：")]),t._v(" "),a("mjx-container",{staticClass:"MathJax",staticStyle:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"},attrs:{jax:"SVG",display:"true"}},[a("svg",{staticStyle:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.452ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"23.919ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 10572.4 950","aria-hidden":"true"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D43F",d:"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(681,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D446",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1603.8,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2659.6,0)"}},[a("text",{attrs:{"data-variant":"italic",transform:"scale(1,-1)","font-size":"884px","font-family":"serif","font-style":"italic"}},[t._v("（")])]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(3659.6,0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D6FC",d:"M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(673,-150) scale(0.707)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(4736.1,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(5180.8,0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D6FC",d:"M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(673,-150) scale(0.707)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(6257.3,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(6702,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"B7",d:"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7202.2,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"B7",d:"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7702.4,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"B7",d:"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7980.4,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(8425.1,0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D6FC",d:"M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(673,-150) scale(0.707)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})])]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(9572.4,0)"}},[a("text",{attrs:{"data-variant":"italic",transform:"scale(1,-1)","font-size":"884px","font-family":"serif","font-style":"italic"}},[t._v("）")])])])])]),a("mjx-assistive-mml",{staticStyle:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"},attrs:{unselectable:"on",display:"block"}},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"}},[a("mi",[t._v("L")]),a("mi",[t._v("S")]),a("mo",[t._v("=")]),a("mi",[t._v("（")]),a("msub",[a("mi",[t._v("α")]),a("mn",[t._v("1")])],1),a("mo",[t._v(",")]),a("msub",[a("mi",[t._v("α")]),a("mn",[t._v("2")])],1),a("mo",[t._v(",")]),a("mo",[t._v("·")]),a("mo",[t._v("·")]),a("mo",[t._v("·")]),a("mo",[t._v(",")]),a("msub",[a("mi",[t._v("α")]),a("mi",[t._v("n")])],1),a("mi",[t._v("）")])],1)],1)],1),a("p",[t._v("LS代表广义表的表名，αi代表广义表的元素，可以是表（子表）或者数据元素（原子）。n代表广义表的长度，即最外层包含的元素个数，当n=0时，广义表为空表。递归定义的重数是广义表的深度，即定义中所包含括号的个数（单边括号的个数），原子的深度为0，空表的深度为1。")]),t._v(" "),a("p",[t._v("head()和tail()是广义表的两个基本操作。head()用于取得广义表的第一个元素，无论是子表还是原子；tail()用于取得广义表中除了第一个元素之外的所有元素构成的表。需要注意的是，如果广义表是空表或只包含一个元素，则tail()操作返回一个空表。")]),t._v(" "),a("h2",{attrs:{id:"四、树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、树"}},[t._v("#")]),t._v(" 四、树")]),t._v(" "),a("h3",{attrs:{id:"树的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的定义"}},[t._v("#")]),t._v(" 🌲树的定义")]),t._v(" "),a("p",[t._v("在数据结构中，树是一种非线性的数据结构，它由一组节点和一组连接节点的边组成。树的定义如下：")]),t._v(" "),a("ol",[a("li",[t._v("树由节点组成，每个节点包含一个值和指向零个或多个子节点的指针。")]),t._v(" "),a("li",[t._v("有一个节点被指定为根节点，它没有父节点。根节点是树的起始点。")]),t._v(" "),a("li",[t._v("除了根节点外，每个节点都有一个父节点。")]),t._v(" "),a("li",[t._v("除了叶节点外，每个节点都可以有一个或多个子节点。")]),t._v(" "),a("li",[t._v("每个节点之间的连接称为边。")])]),t._v(" "),a("p",[t._v("树的形状类似于现实生活中的树，根节点对应树的顶部，叶节点对应树的底部。每个节点可以有任意数量的子节点，但每个节点只能有一个父节点。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1504),alt:"img"}})]),t._v(" "),a("p",[t._v("树可以有不同的类型，如二叉树、二叉搜索树、红黑树等。这些类型的树有各自的特点和应用场景。树结构在计算机科学中有广泛的应用，例如文件系统的目录结构、数据库索引、编译器语法分析等。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("概念")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("定义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("双亲、孩子和兄弟")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("结点的子树的根称为该结点的孩子；相应地，该结点称为其子结点的双亲。具有相同双亲的结点互为兄弟。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"https://blog.csdn.net/liuyiming2019/article/details/113463039",target:"_blank",rel:"noopener noreferrer"}},[t._v("结点的度"),a("OutboundLink")],1)]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("一个结点的子树的个数，记为该结点的度。"),a("img",{attrs:{src:s(1505),alt:"在这里插入图片描述"}})])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("叶子结点")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("叶子结点也称为终端结点。指度为0的结点。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("内部结点")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("度不为0的结点，也称为分支结点或非终端结点。除根结点以外，分支结点也称为内部结点。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("结点的层次")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("根为第一层，根的孩子为第二层，以此类推，若某结点在第 i 层，则其孩子结点在第 i+1 层。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("树的高度（深度）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("一棵树的最大层数，记为树的高度（或深度）。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("有序（无序）树")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("若将树中结点的各子树看成是从左到右具有次序的，即不能交换，则称该树为有序树，否则称为无序树。")])])])]),t._v(" "),a("h3",{attrs:{id:"二叉树的定义和性质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的定义和性质"}},[t._v("#")]),t._v(" 🌲二叉树的定义和性质")]),t._v(" "),a("p",[t._v("二叉树是一种常见的数据结构，它由节点组成，每个节点最多有两个子节点：左子节点和右子节点。每个节点都包含一个值或者数据，值可以是任何类型的数据。")]),t._v(" "),a("p",[t._v("二叉树的特点是每个节点最多有两个子节点，而且子节点的位置是有序的，即左子节点在父节点的左边，右子节点在父节点的右边。")]),t._v(" "),a("p",[t._v("对于二叉树，每一个节点都可以看作是一个子二叉树的根节点。如果一个节点没有子节点，我们称其为叶子节点。另外，如果某个节点不是叶子节点，则它至少有一个子节点。")]),t._v(" "),a("p",[t._v("二叉树可以有不同的特殊类型，比如满二叉树、完全二叉树等。在满二叉树中，除了叶子节点外的每个节点都有两个子节点，并且所有的叶子节点都在同一层上。在完全二叉树中，除了最后一层，其他层都是满的，并且最后一层的叶子节点都尽可能地靠左排列。")]),t._v(" "),a("p",[t._v("二叉树可以用来表示各种各样的数据，比如二叉查找树（Binary Search Tree，简称BST），用来实现快速的查找和插入操作。二叉树还可以用来表示表达式，构建语法树，以及图的遍历等。")]),t._v(" "),a("p",[t._v("二叉树的重要特性如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1506),alt:"img"}})]),t._v(" "),a("p",[t._v("设一棵二叉树上叶结点数为n0，单分支结点数为n1，双分支结点数为n2，则"),a("code",[t._v("总结点数=n0+n1+n2")]),t._v("。")]),t._v(" "),a("p",[t._v("在一棵二叉树中，所有结点的分支数（即度数）应等于单分支结点数加上双分支结点数的2倍，即"),a("code",[t._v("总的分支数=n1+2n2")]),t._v("。")]),t._v(" "),a("p",[t._v("由于二叉树中除根结点以外，每个结点都有唯一的一个分支指向它，因此二叉树中："),a("code",[t._v("总的分支数=总结点数-1")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"二叉树的存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的存储结构"}},[t._v("#")]),t._v(" 🌲二叉树的存储结构")]),t._v(" "),a("p",[t._v("二叉树的存储结构有三种常见的形式：")]),t._v(" "),a("p",[t._v("1、顺序存储：就是用一组连续的存储单元存储二叉树中的节点，按照从上到下，从左到右的顺序依次存储每个节点。对于深度为k的完全二叉树，除第k层外，其余每层中节点数都是上一层的两倍，由此，从一个节点的编号可推知其双亲、左孩子、右孩子结点的编号。假设有编号为i的节点，则有：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("（1）若i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("，该结点为根结点，无双亲\n（2）若i＞1，该阶段的双亲为（i+1）/2（取整数）。\n（3）若2i≤n，则该结点的左孩子编号为2i，否则无左孩子\n（4）若2i+1≤n，则该结点的右孩子编号为2i+1，否则无右孩子。\n（5）若i奇数且不为1，则该结点左兄弟的编号为i-1，否则无左兄弟。\n（6）若i为偶数且小于n，则该结点右兄弟的编号为i+1，否则无右兄弟。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("2、链式存储：一般用二叉链表来存储二叉树节点，二叉链表中除了该节点本身的数据外，还存储有左孩子结点的指针、右孩子结点的指针，即一个数据+两个指针。每个二叉链表节点存储一个二叉树节点，头指针则指向根节点。")]),t._v(" "),a("h3",{attrs:{id:"二叉树的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的遍历"}},[t._v("#")]),t._v(" 🌲二叉树的遍历")]),t._v(" "),a("p",[t._v("二叉树的遍历是指按照某种顺序访问二叉树的所有节点。常用的二叉树遍历方式有三种：前序遍历、中序遍历和后序遍历。")]),t._v(" "),a("ol",[a("li",[t._v("前序遍历（preorder traversal）："),a("strong",[t._v("先访问根节点，再遍历左子树，最后遍历右子树")]),t._v("。具体步骤是：先访问当前节点，然后递归地前序遍历左子树，最后递归地前序遍历右子树。")]),t._v(" "),a("li",[t._v("中序遍历（inorder traversal）："),a("strong",[t._v("先遍历左子树，再访问根节点，最后遍历右子树")]),t._v("。具体步骤是：先递归地中序遍历左子树，然后访问当前节点，最后递归地中序遍历右子树。")]),t._v(" "),a("li",[t._v("后序遍历（postorder traversal）："),a("strong",[t._v("先遍历左子树，再遍历右子树，最后访问根节点")]),t._v("。具体步骤是：先递归地后序遍历左子树，然后递归地后序遍历右子树，最后访问当前节点。")])]),t._v(" "),a("p",[t._v("此外，还有两种特殊的遍历方式：层序遍历和逆序遍历。")]),t._v(" "),a("ol",[a("li",[t._v("层序遍历（level order traversal）：按层级从上到下、从左到右的顺序遍历二叉树。具体步骤是：使用队列，首先将根节点入队，然后循环执行以下操作：出队当前节点，访问当前节点，将当前节点的左子节点和右子节点分别入队。直到队列为空。")]),t._v(" "),a("li",[t._v("逆序遍历：将前序、中序和后序遍历的访问顺序反转。例如，逆序前序遍历即为后序遍历。")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(1507),alt:"img"}})]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),a("p",[t._v("前序：12457836")]),t._v(" "),a("p",[t._v("中序：42785136")]),t._v(" "),a("p",[t._v("后序：48752631")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1508),alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(1509),alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"二叉树的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的分类"}},[t._v("#")]),t._v(" 🌲二叉树的分类")]),t._v(" "),a("p",[t._v("二叉树可以根据特定的属性进行分类，以下是常见的二叉树分类：")]),t._v(" "),a("ol",[a("li",[t._v("满二叉树（Full Binary Tree）：除了叶子节点，每个节点都有两个子节点。")]),t._v(" "),a("li",[t._v("完全二叉树（Complete Binary Tree）：除了最后一层外，其它层的节点都是满的，最后一层的节点都靠左对齐。")]),t._v(" "),a("li",[t._v("二叉搜索树（Binary Search Tree，BST）：对于每个节点，左子树上的所有节点的值都小于等于该节点的值，右子树上的所有节点的值都大于等于该节点的值。")]),t._v(" "),a("li",[t._v("平衡二叉树（Balanced Binary Tree）：对于任意节点，它的左子树和右子树的高度差不大于1。")]),t._v(" "),a("li",[t._v("线索二叉树（Threaded Binary Tree）：在二叉树节点中设置了指向前驱节点和后继节点的线索，可以方便地进行遍历。")]),t._v(" "),a("li",[t._v("哈夫曼树（Huffman Tree）：用于数据压缩，根据数据出现的频率构建的二叉树，频率越高的节点离根节点越近。")]),t._v(" "),a("li",[t._v("Trie树（前缀树）：用于字符串的存储和搜索，每个节点代表一个字符串的字符，从根节点到叶子节点的路径表示一个完整的字符串。")]),t._v(" "),a("li",[t._v("B树（B-Tree）：一种平衡多路查找树，用于大规模数据的存储和检索，每个节点可以有多个子节点。")])]),t._v(" "),a("h4",{attrs:{id:"完全二叉树和满二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完全二叉树和满二叉树"}},[t._v("#")]),t._v(" 🌱完全二叉树和满二叉树")]),t._v(" "),a("p",[t._v("完全二叉树是一种特殊的二叉树，除了最后一层外，每一层的节点都是从左到右连续排列的，最后一层的节点从左到右填充。")]),t._v(" "),a("p",[t._v("满二叉树是一种特殊的完全二叉树，除了叶子节点外，每个节点都有两个子节点。满二叉树通常是一棵深度为h，拥有"),a("strong",[t._v("2^h-1")]),t._v("个节点的二叉树。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1510),alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"线索二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线索二叉树"}},[t._v("#")]),t._v(" 🌱线索二叉树")]),t._v(" "),a("p",[t._v("线索二叉树是对二叉树进行加工，使其能够快速遍历所有节点。")]),t._v(" "),a("p",[t._v("在线索二叉树中，除了左右孩子指针，还添加了两个额外的指针："),a("strong",[t._v("前驱指针和后继指针")]),t._v("。这两个指针分别指向当前节点的前驱节点和后继节点。")]),t._v(" "),a("p",[t._v("对于一个二叉树来说，存在多种线索化方式。以下是两种常见的线索化方式：")]),t._v(" "),a("ol",[a("li",[t._v("前序线索二叉树：在前序遍历过程中进行线索化。对于每个节点，先处理其前驱指针，然后处理左子树，再处理右子树，最后处理后继指针。对于树中的第一个节点，其前驱指针为空，对于树中的最后一个节点，其后继指针为空。")]),t._v(" "),a("li",[t._v("中序线索二叉树：在中序遍历过程中进行线索化。对于每个节点，先处理其左子树，然后处理前驱指针，然后处理右子树，最后处理后继指针。对于树中的第一个节点，其前驱指针为空，对于树中的最后一个节点，其后继指针为空。")])]),t._v(" "),a("p",[t._v("在线索二叉树中，通过前驱和后继指针，可以快速地找到节点的前驱节点和后继节点，从而实现快速遍历。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1511),alt:"img"}})]),t._v(" "),a("p",[t._v("案例：假设有以下二叉树：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    /   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n  / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("   / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("对这棵二叉树进行中序线索化，得到的线索二叉树如下所示：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" - "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("在线索二叉树中，每个节点的左右孩子指针被替换为前驱和后继指针。")]),t._v(" "),a("p",[t._v("在这个例子中，节点1的左前驱指针指向节点5，右后继指针指向节点6；节点2的左前驱指针指向节点4，右后继指针指向节点1；节点3的左前驱指针指向节点6，右后继指针指向节点7；节点4的左前驱指针指向节点2，右后继指针指向节点5；节点5的左前驱指针指向节点4，右后继指针指向节点1；节点6的左前驱指针指向节点1，右后继指针指向节点3；节点7的左前驱指针指向节点3，右后继指针为空。")]),t._v(" "),a("p",[t._v("通过线索化后的二叉树，可以快速地找到每个节点的前驱和后继节点，从而实现快速的中序遍历。")]),t._v(" "),a("h4",{attrs:{id:"最优二叉树-哈夫曼树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最优二叉树-哈夫曼树"}},[t._v("#")]),t._v(" 🌱最优二叉树（哈夫曼树）")]),t._v(" "),a("p",[t._v("最优二叉树，也称为哈夫曼树，是一种特殊的二叉树结构，常用于编码和解码的应用中。")]),t._v(" "),a("p",[t._v("最优二叉树的特点是，频率高的节点离根节点较近，频率低的节点离根节点较远。通过这种方式，可以实现最小化编码的平均长度，从而达到最优的压缩效果。")]),t._v(" "),a("p",[t._v("构建最优二叉树的基本思路是，首先根据每个节点的权重（即出现频率）进行排序，然后选择权重最小的两个节点作为左右子节点，生成一个新的父节点，并将父节点的权重设置为左右子节点的权重之和。重复这个过程，直到所有节点构建成一棵树。")]),t._v(" "),a("p",[t._v("最优二叉树可以应用在哈夫曼编码中，通过树的路径来表示字符的编码，使得频率高的字符编码较短，频率低的字符编码较长，从而实现压缩数据的效果。")]),t._v(" "),a("p",[t._v("相关概念如下：")]),t._v(" "),a("ul",[a("li",[t._v("路径：树中一个结点到另一个结点之间的通路。")]),t._v(" "),a("li",[t._v("结点的路径长度：路径上的分支数目。")]),t._v(" "),a("li",[t._v("树的路径长度：根节点到达每一个叶子节点之间的路径长度之和。")]),t._v(" "),a("li",[t._v("权：节点代表的值。")]),t._v(" "),a("li",[t._v("结点的带权路径长度：该结点到根结点之间的路径长度乘以该节点的权值。")]),t._v(" "),a("li",[t._v("树的带权路径长度（树的代价）：树的所有叶子节点的带权路径长度之和。")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(1512),alt:"img"}})]),t._v(" "),a("p",[t._v("哈夫曼树的求法：给出一组权值，将其中两个最小的权值作为叶子节点，其和作为父节点，组成二叉树，而后删除这两个叶子节点权值，并将父节点的值添加到该组权值中。重复进行上述步骤，直至所有权值都被使用完。")]),t._v(" "),a("p",[t._v("构造出的哈夫曼树中，所有初始给出的权值都作为了叶子节点，此时，求出每个叶子节点的带权路径长度，而后相加，就是树的带权路径长度，这个长度是最小的。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1513),alt:"img"}})]),t._v(" "),a("p",[t._v("案例")]),t._v(" "),a("p",[t._v("假设有以下节点集合：")]),t._v(" "),a("p",[t._v("节点A，出现的频率为5")]),t._v(" "),a("p",[t._v("节点B，出现的频率为3")]),t._v(" "),a("p",[t._v("节点C，出现的频率为2")]),t._v(" "),a("p",[t._v("节点D，出现的频率为1")]),t._v(" "),a("p",[t._v("为了构建最优二叉树，我们可以按照以下步骤进行：")]),t._v(" "),a("ol",[a("li",[t._v("将节点集合按照频率从小到大进行排序，得到排序后的节点集合：D，C，B，A。")]),t._v(" "),a("li",[t._v("从集合中选择频率最小的两个节点作为叶子节点，并创建一个新的节点作为它们的父节点，父节点的频率为子节点的频率之和。在我们的例子中，D和C被选择为叶子节点，它们的频率之和为3。")]),t._v(" "),a("li",[t._v("将新的父节点加入到集合中，并将集合重新排序。新的节点集合为：B，A，新的父节点。")]),t._v(" "),a("li",[t._v("重复步骤2和步骤3，直到集合中只剩下一个节点。")]),t._v(" "),a("li",[t._v("最后剩下的节点就是构建的最优二叉树的根节点。")])]),t._v(" "),a("p",[t._v("根据上述步骤，我们可以得到如下的最优二叉树：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("    B\n   / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  C   A\n /\nD\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("img",{attrs:{src:s(1514),alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"查找二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找二叉树"}},[t._v("#")]),t._v(" 🌱查找二叉树")]),t._v(" "),a("p",[t._v("查找二叉树，也称为二叉搜索树（Binary Search Tree，BST），是一种特殊的二叉树结构，它具有以下性质：")]),t._v(" "),a("ol",[a("li",[t._v("左子树上所有节点的值都小于根节点的值。")]),t._v(" "),a("li",[t._v("右子树上所有节点的值都大于根节点的值。")]),t._v(" "),a("li",[t._v("每个子树也必须满足上述两个性质。")])]),t._v(" "),a("p",[t._v("由于这种特殊的性质，查找二叉树的结构非常便于查找和插入操作。当我们需要查找一个特定的元素时，可以通过比较当前节点的值与目标值的大小关系，根据二叉树的有序性质，可以在左子树或右子树中继续查找，直到找到目标元素或者遍历到叶子节点。")]),t._v(" "),a("p",[t._v("插入操作也非常简单，只需要在合适的位置创建一个新的节点，并调整树的结构以保持其有序性。")]),t._v(" "),a("p",[t._v("对于查找二叉树的时间复杂度，最好的情况下是O(logn)，最坏的情况下是O(n)，其中n是树中节点的个数。这取决于树的形状，如果树是高度平衡的，则查找的时间复杂度会相对较低，否则会退化为链表，导致查找时间复杂度上升。")]),t._v(" "),a("p",[t._v("需要注意的是，查找二叉树并不保证是平衡的，因此在某些情况下可能会导致树的不平衡，从而影响查找的效率。为了解决这个问题，可以使用平衡二叉树的变种，如红黑树或AVL树，来保持树的平衡性。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1515),alt:"img"}})]),t._v(" "),a("p",[t._v("逐点插入法")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/learner_Van/article/details/137401735",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/learner_Van/article/details/137401735"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"平衡二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树"}},[t._v("#")]),t._v(" 🌱平衡二叉树")]),t._v(" "),a("p",[t._v("平衡二叉树（Balanced Binary Tree），也称为AVL树，是一种特殊的二叉搜索树（Binary Search Tree），它的左子树和右子树的高度差不超过1，并且左子树和右子树都是平衡二叉树。")]),t._v(" "),a("p",[t._v("平衡二叉树的一个重要性质是它的高度是O(log n)，其中n是二叉树中节点的数量。")]),t._v(" "),a("p",[t._v("平衡二叉树的结构使得在插入、删除、查找等操作时，可以保持树的平衡性，从而保证了操作的时间复杂度为O(log n)。")]),t._v(" "),a("p",[t._v("平衡二叉树的结构可以通过多种方式实现，比如AVL树、红黑树等。")]),t._v(" "),a("p",[t._v("在平衡二叉树中，"),a("strong",[t._v("每个节点都保存了左子树和右子树的高度差，当插入或删除节点导致不平衡时，需要进行相应的旋转操作来恢复平衡")]),t._v("。")]),t._v(" "),a("p",[t._v("平衡二叉树的常见操作包括插入节点、删除节点、查找节点等。")]),t._v(" "),a("p",[t._v("平衡二叉树的应用非常广泛，常用于需要高效的插入、删除和查找操作的场景，比如字典、数据库索引等。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1516),alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"树和森林"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树和森林"}},[t._v("#")]),t._v(" 🌲树和森林")]),t._v(" "),a("h4",{attrs:{id:"树的结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的结构"}},[t._v("#")]),t._v(" 🌱树的结构")]),t._v(" "),a("p",[t._v("树的存储结构主要有三种：双亲表示法、孩子表示法和孩子兄弟表示法。")]),t._v(" "),a("ul",[a("li",[t._v("在双亲表示法中，树的节点连续存储在一组地址单元中，并在每个节点中附带一个指示器，指示其双亲节点所在数组元素的下标。")]),t._v(" "),a("li",[t._v("孩子表示法中，节点的每个孩子使用指针表示，并为每个节点的孩子建立一个链表。")]),t._v(" "),a("li",[t._v("孩子兄弟表示法又称为二叉链表表示法，为每个存储节点设置两个指针域，分别指向该节点的第一个孩子和下一个兄弟节点。")])]),t._v(" "),a("p",[t._v("树和森林的遍历方法有两种：先根遍历和后根遍历。")]),t._v(" "),a("ul",[a("li",[t._v("在树的先根遍历中，先访问根节点，然后依次遍历根的各颗子树。")]),t._v(" "),a("li",[t._v("在后根遍历中，先遍历根的各颗子树，然后访问根节点。同样，在森林的遍历中，对于森林中的每棵树，都可以进行先根遍历或后根遍历的操作。")])]),t._v(" "),a("h4",{attrs:{id:"树和二叉树的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树和二叉树的转换"}},[t._v("#")]),t._v(" 🌱树和二叉树的转换")]),t._v(" "),a("p",[t._v("树和二叉树是两种不同的数据结构，它们之间可以进行相互转换。")]),t._v(" "),a("p",[t._v("将树转换为二叉树的过程可以通过以下步骤进行：")]),t._v(" "),a("ol",[a("li",[t._v("选择一个树节点作为根节点，并创建一个新的二叉树，将该节点作为根节点。")]),t._v(" "),a("li",[t._v("将树的子节点按照从左到右的顺序，依次添加为二叉树该节点的左子树的右孩子（如果左子树的右孩子为空）或右子树的左孩子（如果右子树的左孩子为空）。")]),t._v(" "),a("li",[t._v("对于每个添加的节点，再按照同样的方式处理它的子节点。")])]),t._v(" "),a("p",[t._v("将二叉树转换为树的过程可以通过以下步骤进行：")]),t._v(" "),a("ol",[a("li",[t._v("选择二叉树的根节点作为树的根节点。")]),t._v(" "),a("li",[t._v("对于二叉树的每个节点，如果它有左子树，则将左子树作为该节点的一个子节点。")]),t._v(" "),a("li",[t._v("对于二叉树的每个节点，如果它有右子树，则将右子树作为该节点的一个子节点。")])]),t._v(" "),a("p",[t._v("需要注意的是，二叉树转换为树时，可能会有多个子节点指向同一个节点，而树转换为二叉树时，每个节点只有一个左孩子和一个右孩子。")]),t._v(" "),a("p",[t._v("示例如下图：采用连线法，将最左边节点和其兄弟节点都连接起来，而原来的父节点和兄弟节点的连线则断开，这种方法最简单，要求掌握。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1517),alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"五、图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、图"}},[t._v("#")]),t._v(" 五、图")]),t._v(" "),a("h3",{attrs:{id:"图的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图的概念"}},[t._v("#")]),t._v(" 🌲图的概念")]),t._v(" "),a("p",[t._v("图是一种非线性数据结构，它由节点（也称为顶点）和连接这些节点的边组成。图可以用来表示各种关系和连接，比如网络拓扑、社交网络、地图等等。图的节点可以包含任意类型的数据，而边则表示节点之间的关系。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("概念")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("定义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("无向图")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("图的节点之间连接线是没有箭头的，不分方向。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("有向图")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("图的节点之间连接线是箭头，区分A到B，和B到A是两条线。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("完全图")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无向完全图中，节点两两之间都有连线，n个结点的连线数为(n-1)+(n-2)+...+1=n*(n-1)/2；有向完全图中，节点两两之间都有互通的两个箭头，n个节点的连线数为n*(n-1)。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("度、出度和入度")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("顶点的度是关联与该顶点的边的数目。在有向图中，顶点的度为出度和入度之和。出度是以该顶点为起点的有向边的数目。入度是以该顶点为终点的有向边的数目。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("路径")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("存在一条通路，可以从一个顶点到达另一个顶点，有向图的路径也是有方向的。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("连通图和连通分量")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("针对无向图。若从顶点v到顶点u之间是有路径的，则说明v和u之间是连通的，若无向图中任意两个顶点之间都是连通的，则称为连通图。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("强连通图的强连通分量")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("针对有向图。若有向图任意两个顶点间都相互存在路径，则称为强连通图。有向图中的极大联通子图称为其强联通分量。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("网")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("边带权值的图称为网。")])])])]),t._v(" "),a("h3",{attrs:{id:"图的存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图的存储"}},[t._v("#")]),t._v(" 🌲图的存储")]),t._v(" "),a("h4",{attrs:{id:"邻接矩阵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邻接矩阵"}},[t._v("#")]),t._v(" 🌱邻接矩阵")]),t._v(" "),a("p",[t._v("图的存储邻接矩阵是一种常见的图表示方式，适用于稠密图（边数接近于顶点数的平方）的存储。")]),t._v(" "),a("p",[t._v("邻接矩阵是一个二维数组，其中行和列表示图中的顶点，数组元素表示顶点之间的边或者权重。")]),t._v(" "),a("p",[t._v("具体的做法如下：")]),t._v(" "),a("ol",[a("li",[t._v("创建一个大小为VxV的二维数组，其中V是图中顶点的个数。")]),t._v(" "),a("li",[t._v("初始化数组的所有元素为0，表示顶点之间没有边。")]),t._v(" "),a("li",[t._v("对于有边连接的两个顶点u和v，设定数组中的元素au和av为1，表示顶点u和v之间有边。")]),t._v(" "),a("li",[t._v("如果图是带权重的，可以将数组中的元素au和av设为边的权重值。")])]),t._v(" "),a("p",[t._v("邻接矩阵的存储优点是可以快速判断两个顶点之间是否有边，时间复杂度为O(1)。但是对于稀疏图（边数远小于顶点数的平方）来说，邻接矩阵会浪费大量的空间。")]),t._v(" "),a("p",[t._v("在使用邻接矩阵存储图时，需要考虑到数组的大小限制和边的存储方式。通常可以使用二维数组、动态数组或稀疏矩阵等数据结构来实现邻接矩阵的存储。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1518),alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(1519),alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"邻接表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邻接表"}},[t._v("#")]),t._v(" 🌱邻接表")]),t._v(" "),a("p",[t._v("图的邻接表是一种常用的图的存储方式，它使用一个数组来存储图中的每个顶点，数组中的每个元素是一个链表，链表中存储了与该顶点相邻的顶点。")]),t._v(" "),a("p",[t._v("例如，考虑以下无向图：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("A -- B -- C\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\nD -- E -- F\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("复制")]),t._v(" "),a("p",[t._v("可以使用邻接表来表示这个图：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("顶点 A: B, D\n顶点 B: A, C\n顶点 C: B, F\n顶点 D: A, E\n顶点 E: D, F\n顶点 F: C, E\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("复制")]),t._v(" "),a("p",[t._v("在邻接表中，每个顶点对应一个链表，链表中的每个节点表示与该顶点相邻的另一个顶点。例如，顶点 A 对应的链表中有节点 B 和 D，表示 A 与 B 和 D 相邻。同样地，顶点 B 对应的链表中有节点 A 和 C，表示 B 与 A 和 C 相邻。")]),t._v(" "),a("p",[t._v("邻接表的优点是可以有效地表示稀疏图，节省了存储空间。同时，邻接表也可以方便地找到一个顶点的所有邻接顶点，因为它们都存储在同一个链表中。但是，对于密集图，邻接表的查询效率可能较低，因为需要遍历链表来寻找相邻顶点。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1520),alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(1521),alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"图的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图的遍历"}},[t._v("#")]),t._v(" 🌲图的遍历")]),t._v(" "),a("p",[t._v("图的遍历是指按照某种规则访问图中的所有节点。图的遍历分为深度优先搜索（DFS）和广度优先搜索（BFS）两种常见的方法。")]),t._v(" "),a("p",[a("strong",[t._v("1、深度优先搜索（DFS）：")])]),t._v(" "),a("p",[t._v("DFS是一种递归的搜索方法。它从图中的某个节点开始，然后递归地访问该节点的所有邻接节点，直到所有可达的节点都被访问一次。然后，返回到上一个节点，尝试访问它的其他邻接节点，直到遍历完整个图。")]),t._v(" "),a("p",[t._v("DFS的过程可以使用栈来实现，首先将起始节点入栈，然后弹出栈顶节点，并将其标记为已访问，接着将该节点的所有未访问的邻接节点入栈。重复这个过程，直到栈为空。")]),t._v(" "),a("p",[a("strong",[t._v("2、广度优先搜索（BFS）：")])]),t._v(" "),a("p",[t._v("BFS使用队列来实现。它从图的某个节点开始，首先将该节点入队列，然后访问该节点的所有邻接节点，并将其入队列。接下来，从队列中取出一个节点并访问它的所有邻接节点，将它们入队列。重复这个过程，直到队列为空。")]),t._v(" "),a("p",[t._v("DFS和BFS都可以用来遍历无向图和有向图。它们之间的主要区别在于访问节点的顺序不同，DFS优先访问深度较大的节点，而BFS优先访问离起始节点近的节点。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1522),alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"图的最小生成树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图的最小生成树"}},[t._v("#")]),t._v(" 🌲图的最小生成树")]),t._v(" "),a("p",[t._v("最小生成树是一个连通无向图的生成树中，边的权值和最小的生成树。图的最小生成树算法有普里姆(Prim)算法和克鲁斯卡尔(Kruskal)算法。")]),t._v(" "),a("p",[t._v("普里姆算法：")]),t._v(" "),a("ol",[a("li",[t._v("选择一个起始顶点，将起始顶点标记为已访问；")]),t._v(" "),a("li",[t._v("在已访问的顶点集合中，选择一条与未访问顶点相连的最小权值边，并将该边的另外一个顶点标记为已访问；")]),t._v(" "),a("li",[t._v("重复步骤2，直到所有顶点都标记为已访问，最小生成树构建完成。")])]),t._v(" "),a("p",[t._v("克鲁斯卡尔算法：")]),t._v(" "),a("ol",[a("li",[t._v("将图中的所有边按照权值从小到大排序；")]),t._v(" "),a("li",[t._v("依次选择权值最小的边，并判断该边的两个顶点是否属于不同的连通分量。如果属于不同的连通分量，则将该边加入最小生成树，否则舍弃该边；")]),t._v(" "),a("li",[t._v("重复步骤2，直到最小生成树的边数等于图的顶点数减一。")])]),t._v(" "),a("p",[t._v("这两种算法都是局部最优原则，所以都是贪心法算法，并且没有谁的效率高谁的效率差，因为克鲁斯卡尔算法是数边的，所以边越多，它算起来越麻烦。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1523),alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(1524),alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(1525),alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"图的拓扑序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图的拓扑序列"}},[t._v("#")]),t._v(" 🌲图的拓扑序列")]),t._v(" "),a("p",[t._v("图的拓扑序列是指一个有向无环图（DAG）的顶点的一种线性排序，使得对于任意的有向边(u, v)，u在拓扑序列中都出现在v之前。")]),t._v(" "),a("p",[t._v("拓扑排序可以用来解决一些实际问题，比如任务调度、编译顺序等。在一个任务调度的问题中，每个顶点表示一个任务，有向边(u, v)表示任务u必须在任务v之前执行。拓扑序列可以用来确定任务的执行顺序，保证所有的依赖关系都得到满足。")]),t._v(" "),a("p",[t._v("拓扑序列可能不是唯一的，一个图可以有多个拓扑序列。可以使用深度优先搜索（DFS）或广度优先搜索（BFS）等算法来生成拓扑序列。")]),t._v(" "),a("p",[t._v("拓扑序列的生成过程如下：")]),t._v(" "),a("ol",[a("li",[t._v("选择一个没有前驱（即入度为0）的顶点，将其加入拓扑序列中。")]),t._v(" "),a("li",[t._v("移除该顶点及其相邻的边。")]),t._v(" "),a("li",[t._v("重复步骤1和2，直到所有的顶点都加入了拓扑序列。")])]),t._v(" "),a("p",[t._v("如果图中存在环路，则无法生成拓扑序列，因为环路表示存在循环依赖关系，无法确定任务的执行顺序。")]),t._v(" "),a("p",[t._v("将有向图的有向边作为活动开始的顺序，若图中一个节点入度为0，则应该最先执行此活动，而后删除掉此节点和其关联的有向边，再去找图中其他没有入度的结点，执行活动，依次进行，示例如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1526),alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(1527),alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"六、查找算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、查找算法"}},[t._v("#")]),t._v(" 六、查找算法")]),t._v(" "),a("ul",[a("li",[t._v("查找基本概念")]),t._v(" "),a("li",[t._v("静态查找表的查找方法")]),t._v(" "),a("li",[t._v("顺序查找")]),t._v(" "),a("li",[t._v("折半查找")]),t._v(" "),a("li",[t._v("分块查找")]),t._v(" "),a("li",[t._v("动态查找表")]),t._v(" "),a("li",[t._v("二叉排序树")]),t._v(" "),a("li",[t._v("平衡二叉树")]),t._v(" "),a("li",[t._v("哈希表")])]),t._v(" "),a("h3",{attrs:{id:"算法基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法基础"}},[t._v("#")]),t._v(" 🌲算法基础")]),t._v(" "),a("h4",{attrs:{id:"算法概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法概念"}},[t._v("#")]),t._v(" 🌱算法概念")]),t._v(" "),a("p",[t._v("算法是一组有序的操作指令，用于解决特定问题或完成特定任务。算法描述了问题的输入和输出，以及在给定输入时如何通过一系列步骤来产生所需的输出。算法可以用来解决各种问题，包括数学问题、计算问题、优化问题等。在计算机科学中，算法是计算机程序的基础，它指导计算机执行特定的计算和操作。一个好的算法应该具有正确性（能够产生正确的输出）、效率（能够在合理的时间内完成计算）和易读性（易于理解和实现）。简单的说就是某个问题的解题思路。")]),t._v(" "),a("h4",{attrs:{id:"算法的复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法的复杂度"}},[t._v("#")]),t._v(" 🌱算法的复杂度")]),t._v(" "),a("p",[t._v("算法的复杂度是衡量算法执行效率的一个指标，通常用时间复杂度和空间复杂度来描述。")]),t._v(" "),a("ol",[a("li",[t._v("时间复杂度：描述随着问题规模的增大，算法执行时间的增长趋势。常见的时间复杂度包括：\n"),a("ul",[a("li",[t._v("常数时间复杂度 O(1)：无论问题规模多大，算法的执行时间都不会随之增长。")]),t._v(" "),a("li",[t._v("线性时间复杂度 O(n)：算法的执行时间与问题规模呈线性关系。")]),t._v(" "),a("li",[t._v("对数时间复杂度 O(log n)：算法的执行时间与问题规模的对数呈线性关系。")]),t._v(" "),a("li",[t._v("平方时间复杂度 O(n^2)：算法的执行时间与问题规模的平方呈线性关系。")]),t._v(" "),a("li",[t._v("指数时间复杂度 O(2^n)：算法的执行时间与问题规模的指数呈线性关系。")])])]),t._v(" "),a("li",[t._v("空间复杂度：描述算法执行中所需的额外空间随问题规模增大的趋势。常见的空间复杂度包括：\n"),a("ul",[a("li",[t._v("常数空间复杂度 O(1)：算法的额外空间不随问题规模的增大而变化。")]),t._v(" "),a("li",[t._v("线性空间复杂度 O(n)：算法的额外空间与问题规模呈线性关系。")]),t._v(" "),a("li",[t._v("对数空间复杂度 O(log n)：算法的额外空间与问题规模的对数呈线性关系。")]),t._v(" "),a("li",[t._v("平方空间复杂度 O(n^2)：算法的额外空间与问题规模的平方呈线性关系。")]),t._v(" "),a("li",[t._v("指数空间复杂度 O(2^n)：算法的额外空间与问题规模的指数呈线性关系。")])])])]),t._v(" "),a("p",[t._v("算法的复杂度分析可以帮助我们评估算法的执行效率，并选择合适的算法来解决问题。通常情况下，我们希望选择时间复杂度低且空间复杂度较小的算法。")]),t._v(" "),a("p",[t._v("常见的对算法执行所需时间的度量：")]),t._v(" "),a("mjx-container",{staticClass:"MathJax",staticStyle:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"},attrs:{jax:"SVG",display:"true"}},[a("svg",{staticStyle:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"73.154ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 32334 1000","aria-hidden":"true"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(763,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(1152,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1652,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2318.8,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"3C",d:"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3374.6,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(4137.6,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(4526.6,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D459",d:"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(4824.6,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D45C",d:"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(5309.6,0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D454",d:"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(510,-150) scale(0.707)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"}})])]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(6223.1,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(6823.1,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7489.9,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"3C",d:"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(8545.7,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(9308.7,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(9697.7,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(10297.7,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(10964.4,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"3C",d:"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(12020.2,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(12783.2,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(13172.2,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(13772.2,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D459",d:"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(14070.2,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D45C",d:"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(14555.2,0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D454",d:"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(510,-150) scale(0.707)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"}})])]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(15468.8,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(16068.8,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(16735.6,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"3C",d:"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(17791.3,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(18554.3,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(18943.3,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"TeXAtom","data-mjx-texclass":"ORD",transform:"translate(19543.3,0)"}},[a("g",{attrs:{"data-mml-node":"mo"}},[a("text",{attrs:{"data-variant":"normal",transform:"scale(1,-1)","font-size":"884px","font-family":"serif"}},[t._v("²")])])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(20143.3,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(20810.1,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"3C",d:"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(21865.9,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(22628.9,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(23017.9,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"TeXAtom","data-mjx-texclass":"ORD",transform:"translate(23617.9,0)"}},[a("g",{attrs:{"data-mml-node":"mo"}},[a("text",{attrs:{"data-variant":"normal",transform:"scale(1,-1)","font-size":"884px","font-family":"serif"}},[t._v("³")])])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(24217.9,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(24884.7,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"3C",d:"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(25940.4,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(26703.4,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(27092.4,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"}})]),a("g",{attrs:{"data-mml-node":"TeXAtom","data-mjx-texclass":"ORD",transform:"translate(27592.4,0)"}},[a("g",{attrs:{"data-mml-node":"mo"}},[a("text",{attrs:{"data-variant":"normal",transform:"scale(1,-1)","font-size":"884px","font-family":"serif"}},[t._v("ⁿ")])])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(28192.4,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(28859.2,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"3C",d:"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(29915,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(30678,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(31067,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(31667,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"21",d:"M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(31945,0)"}},[a("path",{staticStyle:{"stroke-width":"3"},attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])]),a("mjx-assistive-mml",{staticStyle:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"},attrs:{unselectable:"on",display:"block"}},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"}},[a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mn",[t._v("1")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")]),a("mo",[t._v("<")]),a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("l")]),a("mi",[t._v("o")]),a("msub",[a("mi",[t._v("g")]),a("mn",[t._v("2")])],1),a("mi",[t._v("n")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")]),a("mo",[t._v("<")]),a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("n")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")]),a("mo",[t._v("<")]),a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("n")]),a("mi",[t._v("l")]),a("mi",[t._v("o")]),a("msub",[a("mi",[t._v("g")]),a("mn",[t._v("2")])],1),a("mi",[t._v("n")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")]),a("mo",[t._v("<")]),a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("n")]),a("mrow",{attrs:{"data-mjx-texclass":"ORD"}},[a("mo",{attrs:{"data-mjx-pseudoscript":"true"}},[t._v("²")])],1),a("mo",{attrs:{stretchy:"false"}},[t._v(")")]),a("mo",[t._v("<")]),a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("n")]),a("mrow",{attrs:{"data-mjx-texclass":"ORD"}},[a("mo",{attrs:{"data-mjx-pseudoscript":"true"}},[t._v("³")])],1),a("mo",{attrs:{stretchy:"false"}},[t._v(")")]),a("mo",[t._v("<")]),a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mn",[t._v("2")]),a("mrow",{attrs:{"data-mjx-texclass":"ORD"}},[a("mo",{attrs:{"data-mjx-pseudoscript":"true"}},[t._v("ⁿ")])],1),a("mo",{attrs:{stretchy:"false"}},[t._v(")")]),a("mo",[t._v("<")]),a("mi",[t._v("O")]),a("mo",{attrs:{stretchy:"false"}},[t._v("(")]),a("mi",[t._v("n")]),a("mo",[t._v("!")]),a("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1)],1)],1),a("p",[t._v("上述的时间复杂度，经常考到，需要注意的是，时间复杂度是一个大概的规模表示，一般以循环次数表示，O(n)说明执行时间是n的正比，另外，log对数的时间复杂度一般在查找二叉树的算法中出现。渐进符号O表示一个渐进变化程度，实际变化必须小于等于O括号内的渐进变化程度。")]),t._v(" "),a("h3",{attrs:{id:"查找算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找算法"}},[t._v("#")]),t._v(" 🌲查找算法")]),t._v(" "),a("h4",{attrs:{id:"线性查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性查找"}},[t._v("#")]),t._v(" 🌱线性查找")]),t._v(" "),a("p",[t._v("线性查找是一种简单直接的查找算法，也称为顺序查找。它通过遍历待查找的数据集，逐个比较数据元素与目标值，直到找到目标值或遍历完整个数据集为止。")]),t._v(" "),a("p",[t._v("线性查找的基本思路如下：")]),t._v(" "),a("ol",[a("li",[t._v("从第一个数据元素开始，逐个遍历数据集中的元素。")]),t._v(" "),a("li",[t._v("每次比较当前元素与目标值是否相等，如果相等则返回当前位置，表示找到目标值。")]),t._v(" "),a("li",[t._v("如果遍历完整个数据集仍未找到目标值，则返回-1，表示未找到目标值。")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinearSearch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("linearSearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("linearSearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"目标值在位置："')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"未找到目标值"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br")])]),a("p",[t._v("在最坏情况下，线性查找的时间复杂度为O(n)，其中n为数据集的大小。因为需要逐个遍历数据元素，所以当数据集较大时，线性查找的效率相对较低。因此在实际应用中，当数据集较大时，可以考虑使用更高效的查找算法，如二分查找、哈希查找等。")]),t._v(" "),a("h4",{attrs:{id:"折半-二分-查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#折半-二分-查找"}},[t._v("#")]),t._v(" 🌱折半（二分）查找")]),t._v(" "),a("p",[t._v("折半查找（也称为二分查找）是一种高效的查找算法，常用于有序数组中查找某个特定元素的位置。")]),t._v(" "),a("p",[t._v("折半查找的基本思想是首先确定待查找区间的中间位置，然后将待查找元素与中间位置的元素进行比较。如果待查找元素等于中间位置的元素，则查找成功，返回中间位置；如果待查找元素小于中间位置的元素，则在中间位置的左侧区间继续查找；如果待查找元素大于中间位置的元素，则在中间位置的右侧区间继续查找。重复以上步骤直至找到目标元素或待查找区间为空。")]),t._v(" "),a("p",[t._v("折半(二分)查找是一种基于有序数组的查找算法，其时间复杂度为O(logn)。其基本思路如下：")]),t._v(" "),a("ol",[a("li",[t._v("初始化左边界和右边界，将左边界设为0，将右边界设为数组长度减1。")]),t._v(" "),a("li",[t._v("取中间位置的元素，与目标元素进行比较。")]),t._v(" "),a("li",[t._v("如果中间元素等于目标元素，则返回中间元素的索引。")]),t._v(" "),a("li",[t._v("如果中间元素大于目标元素，则在左半部分继续查找，将右边界更新为中间元素的前一个索引。")]),t._v(" "),a("li",[t._v("如果中间元素小于目标元素，则在右半部分继续查找，将左边界更新为中间元素的后一个索引。")]),t._v(" "),a("li",[t._v("重复步骤2至5，直到左边界大于右边界，表示查找失败。")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("binarySearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 目标元素不存在")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 测试案例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("binarySearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"目标元素在数组中的索引为："')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"目标元素不存在数组中"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br")])]),a("p",[t._v("我们首先定义了一个二分查找函数"),a("code",[t._v("binary_search")]),t._v("，它接受一个有序数组"),a("code",[t._v("arr")]),t._v("和目标元素"),a("code",[t._v("target")]),t._v("作为输入。然后我们在数组中查找目标元素并返回其索引，如果目标元素不存在，则返回-1。")]),t._v(" "),a("p",[t._v("时间复杂度分析：")]),t._v(" "),a("p",[t._v("折半查找每次将当前查找范围缩小一半，因此查找的次数取决于查找范围的大小，即查找次数为 logn (以2为底)。因此，折半查找的时间复杂度为O(logn)。")]),t._v(" "),a("h4",{attrs:{id:"散列-哈希-表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#散列-哈希-表"}},[t._v("#")]),t._v(" 🌱散列（哈希）表")]),t._v(" "),a("p",[t._v("哈希查找（Hash Search）也被称为散列查找，是一种根据关键字直接进行访问的查找技术，具有快速查找的特点。哈希查找的基本思路是通过哈希函数将关键字映射到一个固定的位置，称为哈希地址。利用哈希地址来直接访问目标数据。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashTable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashTable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        table "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hashValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("hashValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hashValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),t._v(" entry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("hashValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),t._v(" newEntry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            newEntry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            newEntry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            newEntry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newEntry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 示例代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashTable")]),t._v(" hashTable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashTable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nhashTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"apple"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nhashTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"banana"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nhashTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cherry"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hashTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出：apple")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hashTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出：banana")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hashTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出：cherry")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hashTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出：None")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br"),a("span",{staticClass:"line-number"},[t._v("46")]),a("br"),a("span",{staticClass:"line-number"},[t._v("47")]),a("br"),a("span",{staticClass:"line-number"},[t._v("48")]),a("br"),a("span",{staticClass:"line-number"},[t._v("49")]),a("br"),a("span",{staticClass:"line-number"},[t._v("50")]),a("br"),a("span",{staticClass:"line-number"},[t._v("51")]),a("br"),a("span",{staticClass:"line-number"},[t._v("52")]),a("br"),a("span",{staticClass:"line-number"},[t._v("53")]),a("br"),a("span",{staticClass:"line-number"},[t._v("54")]),a("br"),a("span",{staticClass:"line-number"},[t._v("55")]),a("br"),a("span",{staticClass:"line-number"},[t._v("56")]),a("br")])]),a("p",[t._v("上述代码中，我们创建了一个哈希表（HashTable）类，其中包含以下几个方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("__init__(self, size)")]),t._v("：初始化哈希表，指定哈希表的大小。")]),t._v(" "),a("li",[a("code",[t._v("hash_function(self, key)")]),t._v("：哈希函数，用于将关键字映射到哈希地址。")]),t._v(" "),a("li",[a("code",[t._v("insert(self, key, value)")]),t._v("：插入方法，将关键字和值插入到哈希表中。")]),t._v(" "),a("li",[a("code",[t._v("search(self, key)")]),t._v("：查找方法，根据关键字查找对应的值。")])]),t._v(" "),a("p",[t._v("时间复杂度：")]),t._v(" "),a("ul",[a("li",[t._v("插入和查找的时间复杂度都为O(1)，即常数时间复杂度。这是因为哈希函数的设计使得每个关键字都能映射到唯一的哈希地址，因此可以直接在哈希地址对应的列表中进行操作。在没有冲突的情况下，插入和查找操作都只需要一次哈希映射和一次遍历操作即可完成。")])]),t._v(" "),a("h5",{attrs:{id:"🌈冲突解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌈冲突解决"}},[t._v("#")]),t._v(" "),a("strong",[t._v("🌈")]),t._v("冲突解决")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1528),alt:"img"}})]),t._v(" "),a("p",[t._v("在上图中，很明显，哈希函数产生了冲突，使用的是线性探测法解决冲突，还有其他方法如下：")]),t._v(" "),a("ul",[a("li",[t._v("线性探测法：按物理地址顺序取下一个空闲的存储空间。")]),t._v(" "),a("li",[t._v("伪随机数法：将冲突的数据随机存入任意空闲的地址中。")]),t._v(" "),a("li",[t._v("再散列法：原有的散列函数冲突后，继续用此数据计算另外一个哈希函数，用以解决冲突。")])]),t._v(" "),a("h5",{attrs:{id:"🌈线性探测法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌈线性探测法"}},[t._v("#")]),t._v(" "),a("strong",[t._v("🌈")]),t._v("线性探测法")]),t._v(" "),a("p",[t._v("哈希查找中的线性探测法是一种解决哈希冲突的方法。当在哈希表中插入一个元素时，如果发生冲突，即要插入的位置已经被占用，线性探测法会顺序地往后查找，直到找到一个空槽或者遍历完整个哈希表。")]),t._v(" "),a("p",[t._v("具体的插入过程如下：")]),t._v(" "),a("ol",[a("li",[t._v("使用哈希函数计算要插入元素的哈希值，得到在哈希表中的初始位置。")]),t._v(" "),a("li",[t._v("如果初始位置为空槽，则直接将元素插入到该位置。")]),t._v(" "),a("li",[t._v("如果初始位置已经被占用，即发生冲突，就顺序地往后查找，直到找到一个空槽或者遍历完整个哈希表。")]),t._v(" "),a("li",[t._v("如果找到了空槽，则将元素插入到该空槽中。")]),t._v(" "),a("li",[t._v("如果遍历完整个哈希表，仍然没有找到空槽，表示哈希表已满，插入失败。")])]),t._v(" "),a("p",[t._v("在查找元素时，也使用相同的过程：")]),t._v(" "),a("ol",[a("li",[t._v("使用哈希函数计算要查找元素的哈希值，得到在哈希表中的初始位置。")]),t._v(" "),a("li",[t._v("如果初始位置为空槽，则表示要查找的元素不存在。")]),t._v(" "),a("li",[t._v("如果初始位置不为空槽，需要顺序地往后查找，直到找到目标元素或者遍历完整个哈希表。")]),t._v(" "),a("li",[t._v("如果找到了目标元素，则返回其位置。")]),t._v(" "),a("li",[t._v("如果遍历完整个哈希表，仍然没有找到目标元素，则表示要查找的元素不存在。")])]),t._v(" "),a("p",[t._v("线性探测法的优点是实现简单，插入和查找的平均时间复杂度都是O(1)。然而，它也有一些缺点。当哈希表中的装载因子（已占用槽数目与总槽数目的比值）较大时，会导致冲突的概率增加，从而使得线性探测法的性能下降。另外，线性探测法会产生聚集效应，即冲突的元素会集中在一起，导致哈希表中的空槽较少，进而影响插入和查找的效率。")]),t._v(" "),a("p",[a("strong",[t._v("知识点额外补充：一致性哈希")])]),t._v(" "),a("p",[t._v("一致性哈希是一种解决分布式系统中数据分散和负载均衡的方法。在分布式系统中，数据通常按照某种规则被分散存储在不同的节点上，为了快速定位到存储数据的节点，需要使用哈希函数来将数据的键映射到一个节点的位置。然而，当系统中的节点发生变化（如节点的加入、删除或故障）时，传统的哈希方法需要重新计算所有的映射，导致大量数据的迁移工作，增加系统的开销和复杂性。")]),t._v(" "),a("p",[t._v("一致性哈希通过引入虚拟节点的概念，解决了传统哈希方法的这个问题。具体来说，一致性哈希将哈希空间（通常是一个固定的范围，如0-2^32）划分成一个圆环，并将节点和数据键使用哈希函数映射到圆环上的位置。每个节点在圆环上有多个虚拟节点，通过增加虚拟节点，可以使节点在哈希环上分布更加均匀。")]),t._v(" "),a("p",[t._v("当需要存储数据时，通过哈希函数将数据的键映射到圆环上的一个位置，然后沿着圆环顺时针查找，找到离该位置最近的节点，即为"),a("a",{attrs:{href:"https://cloud.tencent.com/product/cdcs?from_column=20065&from=20065",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据存储"),a("OutboundLink")],1),t._v("的节点。当节点发生变化时，只需要迁移受影响的数据部分，对于其他数据则不需要变动。")]),t._v(" "),a("p",[t._v("一致性哈希的优点包括：")]),t._v(" "),a("ul",[a("li",[t._v("节点的动态变化对数据的迁移影响较小，减少了系统的开销和复杂性。")]),t._v(" "),a("li",[t._v("数据在节点上的分布更加均匀，提高了系统的负载均衡性。")]),t._v(" "),a("li",[t._v("在节点变化时，只需要迁移少量数据，减少了数据迁移的开销。")])]),t._v(" "),a("p",[t._v("一致性哈希在"),a("a",{attrs:{href:"https://cloud.tencent.com/product/cos?from_column=20065&from=20065",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式存储"),a("OutboundLink")],1),t._v("、负载均衡、缓存系统等领域得到广泛应用。")]),t._v(" "),a("h5",{attrs:{id:"🌈伪随机数法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌈伪随机数法"}},[t._v("#")]),t._v(" "),a("strong",[t._v("🌈")]),t._v("伪随机数法")]),t._v(" "),a("p",[t._v("伪随机数法是当哈希函数将多个键映射到同一个索引位置时，伪随机数法可以通过生成一系列伪随机数来确定下一个可用的位置。")]),t._v(" "),a("p",[t._v("伪随机数法的基本思想是，在冲突的位置上，通过计算一个伪随机数来确定下一个可用的位置。这个伪随机数可以是基于当前冲突位置和键的某种计算方式得出的结果。一旦找到了下一个可用的位置，就可以将键值对插入到该位置上。")]),t._v(" "),a("p",[t._v("伪随机数法的一个优点是，可以较好地解决哈希冲突问题，减少冲突的次数，提高查找效率。然而，伪随机数法也有一些限制和注意事项。首先，生成伪随机数的计算方式需要被设计得足够复杂，以保证生成的位置能够更加均匀地分布在哈希表中，避免过多的冲突。其次，伪随机数生成的效率可能较低，特别是在哈希表规模较大的情况下。因此，在实际应用中，需要根据具体的需求和场景选择适合的哈希冲突解决方法。")]),t._v(" "),a("h5",{attrs:{id:"🌈再散列法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌈再散列法"}},[t._v("#")]),t._v(" "),a("strong",[t._v("🌈")]),t._v("再散列法")]),t._v(" "),a("p",[t._v("再散列法（Rehashing）它是在原有的哈希表中再次进行哈希运算，以找到一个新的位置存储冲突的元素。")]),t._v(" "),a("p",[t._v("具体来说，当发生冲突时，再散列法会使用不同的哈希函数或使用原有哈希函数的不同参数，将冲突元素重新计算哈希值，然后找到一个新的位置存储。")]),t._v(" "),a("p",[t._v("再散列法可以多次进行再散列，直到找到一个不冲突的位置为止。常见的再散列方法包括线性探测再散列、平方探测再散列、双散列等。")]),t._v(" "),a("p",[t._v("再散列法的优点是简单、易于实现，并且在处理小规模数据集时表现良好。然而，当数据量大或者哈希函数选择不当时，再散列法可能导致严重的哈希冲突问题，使查询效率下降。因此，在设计哈希表时，需要选择合适的哈希函数和再散列方法，以避免冲突。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1529),alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(1530),alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"七、排序算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、排序算法"}},[t._v("#")]),t._v(" 七、排序算法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("排序基本概念")])]),t._v(" "),a("li",[a("p",[t._v("简单排序")])]),t._v(" "),a("li",[a("p",[t._v("希尔排序")]),t._v(" "),a("p",[t._v("改进的插入排序")])]),t._v(" "),a("li",[a("p",[t._v("快速排序")])]),t._v(" "),a("li",[a("p",[t._v("堆排序")])]),t._v(" "),a("li",[a("p",[t._v("归并排序")])]),t._v(" "),a("li",[a("p",[t._v("基数排序")])]),t._v(" "),a("li",[a("p",[t._v("外部排序")])])]),t._v(" "),a("h3",{attrs:{id:"排序算法分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序算法分类"}},[t._v("#")]),t._v(" 🌲排序算法分类")]),t._v(" "),a("p",[t._v("稳定与不稳定排序：依据是两个相同的值在一个待排序序列中的顺序和排序后的顺序应该是相对不变的，即开始时21在21前，那排序结束后，若该21还在21前，则为稳定排序，不改变相同值的相对顺序。\n内排序和外排序：依据排序是在内存中进行的还是在外部进行的。")]),t._v(" "),a("p",[t._v("排序的算法有很多，大致可以分类如下：")]),t._v(" "),a("ul",[a("li",[t._v("插入类排序：直接插入排序、希尔排序。")]),t._v(" "),a("li",[t._v("交换类排序：冒泡排序、快速排序。")]),t._v(" "),a("li",[t._v("选择类排序：简单选择排序、堆排序。")]),t._v(" "),a("li",[t._v("归并排序。")]),t._v(" "),a("li",[t._v("基数排序。")])]),t._v(" "),a("p",[t._v("常见的排序算法有以下几种：")]),t._v(" "),a("ol",[a("li",[t._v("冒泡排序（Bubble Sort）：依次比较相邻的两个元素，将较大的元素交换到后面，每一轮比较都将最大的元素放到最后。时间复杂度为O(n^2)。")]),t._v(" "),a("li",[t._v("选择排序（Selection Sort）：每次从待排序的元素中选取最小的元素，放置在已排序的末尾。时间复杂度为O(n^2)。")]),t._v(" "),a("li",[t._v("插入排序（Insertion Sort）：将待排序的元素插入到已排序的序列中的适当位置，使得插入后仍然有序。时间复杂度平均为O(n^2)，最好情况下为O(n)，最坏情况下为O(n^2)。")]),t._v(" "),a("li",[t._v("希尔排序（Shell Sort）：是插入排序的一种改进，通过将序列分组，每次对分组进行插入排序，然后逐步缩小分组的规模，最终完成排序。时间复杂度为O(nlogn)。")]),t._v(" "),a("li",[t._v("归并排序（Merge Sort）：将序列不断地分割成两半，对每一半进行排序，然后合并两个已排序的子序列，最终完成排序。时间复杂度为O(nlogn)。")]),t._v(" "),a("li",[t._v("快速排序（Quick Sort）：通过一趟排序将序列分成独立的两部分，其中一部分所有元素都比另一部分小，然后再对这两部分递归地进行快速排序。时间复杂度平均为O(nlogn)，最坏情况下为O(n^2)。")]),t._v(" "),a("li",[t._v("堆排序（Heap Sort）：将待排序的序列构建成一个大顶堆，然后将堆顶元素与最后一个元素交换，再对剩余的n-1个元素进行调整，循环执行以上步骤，最终完成排序。时间复杂度为O(nlogn)。")]),t._v(" "),a("li",[t._v("计数排序（Counting Sort）：统计待排序序列中每个元素的出现次数，然后根据元素的值从小到大依次输出。时间复杂度为O(n+k)，其中k表示序列中元素的范围。")]),t._v(" "),a("li",[t._v("桶排序（Bucket Sort）：将待排序的元素映射到一个有限数量的桶中，每个桶再分别进行排序，最后将所有桶中的元素按次序合并成有序序列。时间复杂度为O(n+k)，其中k表示桶的数量。")]),t._v(" "),a("li",[t._v("基数排序（Radix Sort）：将待排序的元素从低位到高位依次进行排序，每一位都使用一种稳定的排序算法（如计数排序或桶排序）。时间复杂度为O(d(n+k))，其中d表示元素的最大位数，k表示每一位的可能取值范围。")])]),t._v(" "),a("p",[t._v("术语说明")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("术语")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("数据元素")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("要排序的数据的基本单位，可以是数字、字符、对象等")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("关键字")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数据元素中用于排序的属性或值，可以是元素本身或元素的某个特定属性")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("升序")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("按照关键字的大小从小到大进行排序")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("降序")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("按照关键字的大小从大到小进行排序")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("稳定性")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("如果两个关键字相等的元素在排序后的序列中的相对位置保持不变，排序算法是稳定的；否则，排序算法是不稳定的")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("内部排序")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("排序过程中所有数据都能够全部加载到内存中进行排序")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("外部排序")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("排序过程中数据量太大，无法一次性加载到内存中，需要借助外部存储设备进行排序")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("比较排序")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("排序算法通过比较关键字的大小进行排序")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("非比较排序")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("排序算法不直接通过比较关键字的大小进行排序，而是利用元素的其他特性进行排序，如计数排序、桶排序和基数排序")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("原地排序")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("排序过程中只使用了常数级别的额外空间")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("时间复杂度")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("描述算法的耗时程度，即算法执行所需的时间")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("空间复杂度")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("描述算法所需的额外空间")])])])]),t._v(" "),a("h3",{attrs:{id:"直接插入排序-插入类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接插入排序-插入类"}},[t._v("#")]),t._v(" 🌲直接插入排序（插入类）")]),t._v(" "),a("p",[t._v("直接插入排序是一种简单直观的排序算法，它的思想是将一个序列分为有序和无序两部分，每次从无序部分中取出一个元素，插入到有序部分的正确位置上，直到整个序列有序为止。")]),t._v(" "),a("p",[t._v("具体步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("将序列分为有序和无序两部分，初始时有序部分只有一个元素（即序列的第一个元素），无序部分包括剩余的元素。")]),t._v(" "),a("li",[t._v("从无序部分中取出一个元素，记为待插入元素。")]),t._v(" "),a("li",[t._v("将待插入元素与有序部分的元素进行比较，找到待插入元素在有序部分的正确位置。")]),t._v(" "),a("li",[t._v("将有序部分中大于待插入元素的元素后移一位，腾出位置给待插入元素。")]),t._v(" "),a("li",[t._v("将待插入元素放入正确位置。")]),t._v(" "),a("li",[t._v("重复步骤2到步骤5，直到无序部分为空。")])]),t._v(" "),a("p",[t._v("时间复杂度：")]),t._v(" "),a("ul",[a("li",[t._v("最好情况下，当序列已经有序时，直接插入排序的时间复杂度为O(n)，因为只需遍历一次序列。")]),t._v(" "),a("li",[t._v("最坏情况下，当序列逆序时，直接插入排序的时间复杂度为O(n^2)，因为要进行n次插入操作，每次插入操作的时间复杂度为O(n)。")]),t._v(" "),a("li",[t._v("平均情况下，直接插入排序的时间复杂度也为O(n^2)。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("直接插入排序—示例  "),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[a("img",{attrs:{src:s(1531),alt:"img"}})])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("直接插入排序—动态示例")]),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("img",{attrs:{src:s(1532),alt:"img"}})])])])]),t._v(" "),a("h3",{attrs:{id:"希尔排序-插入类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#希尔排序-插入类"}},[t._v("#")]),t._v(" 🌲希尔排序（插入类）")]),t._v(" "),a("p",[t._v("希尔排序是一种基于插入排序的排序算法，也称为缩小增量排序。它通过逐步减小增量的方式分组并对元素进行比较和交换，最终实现整体的有序。")]),t._v(" "),a("p",[t._v("希尔排序的算法步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("选择一个增量序列，常用的是希尔增量序列，即初始增量gap为数组长度的一半，然后每次将gap缩小一半，直到gap为1。")]),t._v(" "),a("li",[t._v("对每个增量间隔进行插入排序。从第gap个元素开始，将其与之前的元素进行比较，如果前面的元素更大，则将其向后移动gap个位置。重复这个过程直到无法向前移动为止。")]),t._v(" "),a("li",[t._v("缩小增量，重新进行插入排序，直到最后一次增量为1，即进行最后一次插入排序，此时整个数组已经是有序的了。")])]),t._v(" "),a("p",[t._v("时间复杂度：")]),t._v(" "),a("ul",[a("li",[t._v("希尔排序的时间复杂度取决于选取的增量序列，最好的情况下可以达到O(nlogn)，")]),t._v(" "),a("li",[t._v("最坏的情况下为O(n^2)。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("希尔排序—示例"),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("th",[a("img",{attrs:{src:s(1533),alt:"img"}})])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("希尔排序—动态示例")]),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("td",[a("img",{attrs:{src:s(1534),alt:"img"}})])])])]),t._v(" "),a("h3",{attrs:{id:"简单选择排序-选择类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单选择排序-选择类"}},[t._v("#")]),t._v(" 🌲简单选择排序（选择类）")]),t._v(" "),a("p",[t._v("简单选择排序是一种简单直观的排序算法，它的基本思想是每次从待排序的数据中选择最小（或最大）的元素，然后放到已排序序列的末尾，直至所有元素排序完毕。")]),t._v(" "),a("p",[t._v("具体的排序过程如下：")]),t._v(" "),a("ol",[a("li",[t._v("从待排序序列中，找到关键字最小的元素。")]),t._v(" "),a("li",[t._v("如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换位置。")]),t._v(" "),a("li",[t._v("从剩余的待排序序列中，继续找到关键字最小的元素，重复步骤2。")]),t._v(" "),a("li",[t._v("重复步骤2和步骤3，直到待排序序列中只剩下一个元素。")])]),t._v(" "),a("p",[t._v("时间复杂度为：")]),t._v(" "),a("p",[t._v("简单选择排序的时间复杂度为O(n^2)，其中n为待排序序列的长度。虽然简单选择排序的时间复杂度较高，但对于小规模的数据排序还是比较高效的。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("简单选择排序—示例"),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("th",[a("img",{attrs:{src:s(1535),alt:"img"}})])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("简单选择排序—动态示例")]),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("td",[a("img",{attrs:{src:s(1536),alt:"img"}})])])])]),t._v(" "),a("h3",{attrs:{id:"堆排序-选择类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆排序-选择类"}},[t._v("#")]),t._v(" 🌲堆排序（选择类）")]),t._v(" "),a("p",[t._v("堆排序是一种基于二叉堆数据结构的排序算法。它的时间复杂度为O(nlogn)，空间复杂度为O(1)。")]),t._v(" "),a("p",[t._v("堆排序的具体步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("将待排序序列构建成一个大顶堆（或小顶堆），从最后一个非叶子节点开始，自下而上地进行堆调整。")]),t._v(" "),a("li",[t._v("交换堆顶元素（最大值或最小值）和堆中最后一个元素。")]),t._v(" "),a("li",[t._v("从根节点开始，自上而下地进行堆调整，保持堆的性质。")]),t._v(" "),a("li",[t._v("重复步骤2和步骤3，直到堆中只剩下一个元素。")])]),t._v(" "),a("p",[t._v("堆排序适用于在多个元素中找出前几名的方案设计，因为堆排序是选择排序，而且选择出前几名的效率很高。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("堆排序—示例"),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("th",[a("img",{attrs:{src:s(1537),alt:"img"}})])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("堆排序—动态示例")]),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("td",[a("img",{attrs:{src:s(1538),alt:"img"}})])])])]),t._v(" "),a("h3",{attrs:{id:"冒泡排序-交换类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序-交换类"}},[t._v("#")]),t._v(" 🌲冒泡排序（交换类）")]),t._v(" "),a("p",[t._v("冒泡排序是一种简单直观的排序算法。它重复地遍历要排序的列表，通过比较相邻元素并交换它们，将列表中的最大元素逐渐“冒泡”到列表的末尾。在每一次遍历中，比较相邻的两个元素，如果它们的顺序不正确，则交换它们的位置。重复这个过程，直到整个列表排序完成。")]),t._v(" "),a("p",[t._v("具体算法步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("比较相邻的两个元素，如果它们的顺序不正确，则交换它们的位置。")]),t._v(" "),a("li",[t._v("对每一对相邻的元素重复步骤1，直到最后一对元素。")]),t._v(" "),a("li",[t._v("重复步骤1和步骤2，直到没有需要交换的元素，即列表已经有序。")])]),t._v(" "),a("p",[t._v("冒泡排序的时间复杂度为O(n^2)，其中n是列表的长度。由于每次遍历都会将当前未排序部分的最大元素“冒泡”到末尾，因此需要遍历n次。每次遍历中需要比较相邻的元素并可能交换它们的位置，最坏情况下需要比较和交换(n-1)次，因此总的比较和交换次数为n*(n-1)/2，即O(n^2)。")]),t._v(" "),a("p",[t._v("冒泡排序是一种稳定的排序算法，即相等元素的相对位置在排序后不会改变。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("冒泡排序—示例"),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("th",[a("img",{attrs:{src:s(1539),alt:"img"}})])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("冒泡排序—动态示例")]),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("td",[a("img",{attrs:{src:s(1540),alt:"img"}})])])])]),t._v(" "),a("h3",{attrs:{id:"快速排序-交换类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速排序-交换类"}},[t._v("#")]),t._v(" 🌲快速排序（交换类）")]),t._v(" "),a("p",[t._v("快速排序是一种高效的排序算法，它基于分治的思想。")]),t._v(" "),a("p",[t._v("快速排序的基本思想是选择一个基准元素（通常选择数组的第一个元素），将数组分成两个子数组，使得左子数组的所有元素均小于基准元素，右子数组的所有元素均大于基准元素，然后对这两个子数组分别进行快速排序，最后将左子数组、基准元素和右子数组合并起来。")]),t._v(" "),a("p",[t._v("具体的实现步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("选择一个基准元素，通常选择数组的第一个元素。")]),t._v(" "),a("li",[t._v("定义两个指针，一个指向数组的第一个元素，一个指向数组的最后一个元素。")]),t._v(" "),a("li",[t._v("将指针进行移动，直到找到左边大于等于基准元素的元素和右边小于等于基准元素的元素。")]),t._v(" "),a("li",[t._v("如果左指针小于等于右指针，则交换这两个元素的位置。")]),t._v(" "),a("li",[t._v("继续移动指针，直到左指针大于右指针。")]),t._v(" "),a("li",[t._v("交换基准元素和左指针的元素的位置，使得左指针左边的元素都小于基准元素，右指针右边的元素都大于基准元素。")]),t._v(" "),a("li",[t._v("对左子数组和右子数组分别进行快速排序，递归地进行上述步骤。")]),t._v(" "),a("li",[t._v("当子数组的长度小于等于1时，停止递归。")])]),t._v(" "),a("p",[t._v("快速排序的时间复杂度为O(nlogn)，其中n为数组的长度。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("快速排序—示例"),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("快速排序—动态示例")]),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("td",[a("img",{attrs:{src:s(1541),alt:"img"}})])])])]),t._v(" "),a("p",[t._v("https://www.cnblogs.com/loong-hon/p/14518756.html")]),t._v(" "),a("h3",{attrs:{id:"归并排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#归并排序"}},[t._v("#")]),t._v(" 🌲归并排序")]),t._v(" "),a("p",[t._v("归并排序是一种分治算法，它将一个数组分成两个子数组，对每个子数组进行递归排序，然后将两个子数组合并为一个有序的数组。")]),t._v(" "),a("p",[t._v("具体步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("将待排序数组分成两个子数组，分别递归地对两个子数组进行排序。")]),t._v(" "),a("li",[t._v("合并两个有序的子数组，得到一个有序的数组。")])]),t._v(" "),a("p",[t._v("合并两个有序的子数组的步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("创建一个临时数组，用来存储合并后的有序数组。")]),t._v(" "),a("li",[t._v("比较两个子数组的首元素，将较小的元素放入临时数组，并将对应子数组的指针向后移动一位。")]),t._v(" "),a("li",[t._v("重复上述步骤，直到其中一个子数组的元素全部放入临时数组。")]),t._v(" "),a("li",[t._v("将另一个子数组的剩余元素放入临时数组。")]),t._v(" "),a("li",[t._v("将临时数组的元素复制回原数组的对应位置。")])]),t._v(" "),a("p",[t._v("归并排序的时间复杂度为O(nlogn)，空间复杂度为O(n)。它是一种稳定的排序算法，适用于处理大规模数据和外部排序。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("归并排序—示例"),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("th",[a("img",{attrs:{src:s(1542),alt:"img"}})])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("归并排序—动态示例")]),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("td",[a("img",{attrs:{src:s(1543),alt:"img"}})])])])]),t._v(" "),a("h3",{attrs:{id:"基数排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基数排序"}},[t._v("#")]),t._v(" 🌲基数排序")]),t._v(" "),a("p",[t._v("基数排序是一种非比较型的排序算法，它按照元素的各个位的值来进行排序。基数排序可以用于整数或者字符串的排序。")]),t._v(" "),a("p",[t._v("基数排序的基本思想是：将待排序的元素分配到有限数量的桶中，然后按照桶的顺序依次取出元素构成有序序列。桶的数量一般和基数的范围有关。")]),t._v(" "),a("p",[t._v("具体的算法步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("找出待排序元素中的最大值，确定最大值的位数，这个位数决定了需要进行多少次排序操作；")]),t._v(" "),a("li",[t._v("准备桶，桶的数量一般和基数的范围有关；")]),t._v(" "),a("li",[t._v("对待排序的元素按照从低位到高位的顺序依次进行排序：\n"),a("ul",[a("li",[t._v("将待排序的元素按照当前位的值分配到对应的桶中；")]),t._v(" "),a("li",[t._v("按照桶的顺序依次取出元素构成有序序列；")]),t._v(" "),a("li",[t._v("循环上述步骤，直到所有位都排序完成。")])])])]),t._v(" "),a("p",[t._v("基数排序的时间复杂度取决于数据的位数和数据范围，一般情况下为O(d*(n+r))，其中d是最大值的位数，n是元素个数，r是基数的范围。基数排序是一种稳定的排序算法。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("基数排序—示例"),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})]),t._v(" "),a("th",[a("img",{attrs:{src:s(1544),alt:"img"}})])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("基数排序—动态示例"),a("img",{attrs:{width:"200/"}}),a("img",{attrs:{width:"200/"}})])]),t._v(" "),a("td",[a("img",{attrs:{src:s(1545),alt:"img"}})])])])]),t._v(" "),a("h3",{attrs:{id:"排序算法比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序算法比较"}},[t._v("#")]),t._v(" 🌲排序算法比较")]),t._v(" "),a("p",[a("img",{attrs:{src:s(1546),alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(1547),alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(1548),alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(1549),alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(1550),alt:"img"}})])],1)}),[],!1,null,null,null);a.default=e.exports}}]);